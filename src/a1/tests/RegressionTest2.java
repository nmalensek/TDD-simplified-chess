package a1.tests;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test001");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece chessPiece15 = chessBoard6.getPiece("a1");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        chessBoard24.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard24, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook27.legalMoves();
        boolean boolean32 = chessBoard16.placePiece((a1.ChessPiece) rook27, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook27.legalMoves();
        boolean boolean36 = chessBoard6.placePiece((a1.ChessPiece) rook27, "");
        java.lang.String str37 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList38 = rook27.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) rook27, "a1");
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard0, color41);
        try {
            java.lang.String str43 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(chessPiece15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "a1" + "'", str37.equals("a1"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test002");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Queen queen22 = new a1.Queen(chessBoard16, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        chessBoard25.initialize();
        java.lang.String str27 = chessBoard25.toString();
        a1.ChessPiece.Color color28 = null;
        a1.Knight knight29 = new a1.Knight(chessBoard25, color28);
        java.lang.String str30 = chessBoard25.toString();
        a1.ChessPiece.Color color31 = null;
        a1.Queen queen32 = new a1.Queen(chessBoard25, color31);
        java.lang.Class<?> wildcardClass33 = chessBoard25.getClass();
        a1.ChessPiece.Color color34 = null;
        a1.Queen queen35 = new a1.Queen(chessBoard25, color34);
        java.util.ArrayList<java.lang.String> strList36 = queen35.legalMoves();
        boolean boolean38 = chessBoard16.placePiece((a1.ChessPiece) queen35, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) queen35, "a1");
        a1.ChessPiece.Color color41 = queen35.getColor();
        java.util.ArrayList<java.lang.String> strList42 = queen35.legalMoves();
        java.util.ArrayList<java.lang.String> strList43 = queen35.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str27.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str30.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(color41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test003");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = queen18.legalMoves();
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test004");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        java.util.ArrayList<java.lang.String> strList19 = pawn16.legalMoves();
        a1.ChessPiece.Color color20 = pawn16.getColor();
        try {
            java.lang.String str21 = pawn16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(color20);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test005");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        java.util.ArrayList<java.lang.String> strList20 = king19.legalMoves();
        try {
            java.lang.String str21 = king19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test006");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Rook rook22 = new a1.Rook(chessBoard0, color21);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test007");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        try {
            java.lang.String str16 = bishop15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test008");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        boolean boolean24 = chessBoard17.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessPiece chessPiece26 = chessBoard17.getPiece("a1");
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard17, color27);
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) bishop28, "a1");
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard0, color31);
        java.util.ArrayList<java.lang.String> strList33 = bishop32.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chessPiece26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test009");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.lang.Class<?> wildcardClass7 = chessBoard0.getClass();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        java.lang.String str10 = chessBoard8.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Knight knight12 = new a1.Knight(chessBoard8, color11);
        java.lang.String str13 = chessBoard8.toString();
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard8, color14);
        java.lang.String str16 = queen15.getPosition();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) queen15, "");
        try {
            queen15.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str13.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "a1" + "'", str16.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test010");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str23 = queen20.getPosition();
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "a1" + "'", str23.equals("a1"));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test011");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.lang.Class<?> wildcardClass7 = chessBoard0.getClass();
        try {
            a1.ChessPiece chessPiece9 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test012");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Rook rook22 = new a1.Rook(chessBoard0, color21);
        java.util.ArrayList<java.lang.String> strList23 = rook22.legalMoves();
        try {
            java.lang.String str24 = rook22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test013");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color25);
        java.util.ArrayList<java.lang.String> strList27 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = bishop26.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test014");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color25);
        java.util.ArrayList<java.lang.String> strList27 = bishop26.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = bishop26.legalMoves();
        try {
            java.lang.String str29 = bishop26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test015");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard0, color18);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test016");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Rook rook31 = new a1.Rook(chessBoard0, color30);
        try {
            java.lang.String str32 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test017");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.Class<?> wildcardClass3 = knight2.getClass();
        java.lang.Class<?> wildcardClass4 = knight2.getClass();
        try {
            java.lang.String str5 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test018");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = pawn16.getColor();
        java.util.ArrayList<java.lang.String> strList18 = pawn16.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNull(color17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test019");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList8 = bishop7.legalMoves();
        try {
            java.lang.String str9 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test020");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Bishop bishop55 = new a1.Bishop(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        boolean boolean60 = chessBoard53.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessPiece.Color color61 = pawn58.getColor();
        java.lang.String str62 = pawn58.getPosition();
        java.util.ArrayList<java.lang.String> strList63 = pawn58.legalMoves();
        boolean boolean65 = chessBoard0.placePiece((a1.ChessPiece) pawn58, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList66 = pawn58.legalMoves();
        java.util.ArrayList<java.lang.String> strList67 = pawn58.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(color61);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "a1" + "'", str62.equals("a1"));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test021");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Knight knight31 = new a1.Knight(chessBoard0, color30);
        a1.ChessPiece.Color color32 = knight31.getColor();
        java.lang.String str33 = knight31.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(color32);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "a1" + "'", str33.equals("a1"));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test022");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook30.legalMoves();
        boolean boolean35 = chessBoard19.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList36 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = rook30.legalMoves();
        boolean boolean39 = chessBoard9.placePiece((a1.ChessPiece) rook30, "");
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList42 = rook30.legalMoves();
        a1.ChessPiece.Color color43 = rook30.getColor();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(color43);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test023");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        java.lang.String str9 = pawn5.getPosition();
        try {
            java.lang.String str10 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1" + "'", str9.equals("a1"));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test024");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test025");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        try {
            a1.ChessPiece chessPiece4 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test026");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = queen6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = queen6.legalMoves();
        java.lang.Class<?> wildcardClass9 = queen6.getClass();
        try {
            java.lang.String str10 = queen6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test027");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.King king10 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = king10.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = king10.legalMoves();
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test028");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = pawn11.getColor();
        java.util.ArrayList<java.lang.String> strList13 = pawn11.legalMoves();
        java.lang.String str14 = pawn11.getPosition();
        java.util.ArrayList<java.lang.String> strList15 = pawn11.legalMoves();
        java.lang.Class<?> wildcardClass16 = pawn11.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test029");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        java.lang.String str12 = king11.getPosition();
        java.lang.String str13 = king11.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test030");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard0, color12);
        java.lang.String str14 = rook13.getPosition();
        a1.ChessPiece.Color color15 = rook13.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
        org.junit.Assert.assertNull(color15);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test031");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = null;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard31, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard31, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard0, color38);
        try {
            a1.ChessPiece chessPiece41 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test032");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = bishop15.legalMoves();
        try {
            java.lang.String str17 = bishop15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test033");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard26, color27);
        java.lang.String str29 = knight28.getPosition();
        a1.ChessPiece.Color color30 = knight28.getColor();
        java.util.ArrayList<java.lang.String> strList31 = knight28.legalMoves();
        java.lang.Class<?> wildcardClass32 = knight28.getClass();
        java.util.ArrayList<java.lang.String> strList33 = knight28.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = knight28.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) knight28, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece39 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "a1" + "'", str29.equals("a1"));
        org.junit.Assert.assertNull(color30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test034");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = pawn16.getColor();
        try {
            java.lang.String str18 = pawn16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNull(color17);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test035");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece chessPiece15 = chessBoard6.getPiece("a1");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        chessBoard24.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard24, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook27.legalMoves();
        boolean boolean32 = chessBoard16.placePiece((a1.ChessPiece) rook27, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook27.legalMoves();
        boolean boolean36 = chessBoard6.placePiece((a1.ChessPiece) rook27, "");
        java.lang.String str37 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList38 = rook27.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) rook27, "a1");
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard0, color41);
        try {
            java.lang.String str43 = bishop42.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(chessPiece15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "a1" + "'", str37.equals("a1"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test036");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        try {
            java.lang.String str12 = queen11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test037");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        java.util.ArrayList<java.lang.String> strList25 = king24.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test038");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        knight2.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList10 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = knight2.legalMoves();
        java.lang.String str12 = knight2.getPosition();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test039");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard0, color25);
        try {
            chessBoard0.move("", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test040");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test041");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        java.lang.String str28 = bishop27.getPosition();
        java.util.ArrayList<java.lang.String> strList29 = bishop27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = bishop27.legalMoves();
        try {
            java.lang.String str31 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test042");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        java.lang.String str13 = bishop12.getPosition();
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test043");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        try {
            java.lang.String str10 = king9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test044");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        try {
            java.lang.String str22 = pawn21.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test045");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        try {
            java.lang.String str17 = rook16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test046");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard0, color18);
        java.util.ArrayList<java.lang.String> strList20 = queen19.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = queen19.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test047");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard0, color33);
        java.util.ArrayList<java.lang.String> strList35 = rook34.legalMoves();
        java.util.ArrayList<java.lang.String> strList36 = rook34.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test048");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        java.lang.Class<?> wildcardClass10 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test049");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = pawn16.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = pawn16.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = pawn16.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test050");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = king15.legalMoves();
        java.lang.Class<?> wildcardClass18 = king15.getClass();
        try {
            java.lang.String str19 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test051");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        java.util.ArrayList<java.lang.String> strList13 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test052");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard28, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard28, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard28, color33);
        java.lang.String str35 = chessBoard28.toString();
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard28, color36);
        java.util.ArrayList<java.lang.String> strList38 = king37.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) king37, "hi!");
        java.util.ArrayList<java.lang.String> strList41 = king37.legalMoves();
        java.util.ArrayList<java.lang.String> strList42 = king37.legalMoves();
        try {
            java.lang.String str43 = king37.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str35.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test053");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        boolean boolean33 = chessBoard26.placePiece((a1.ChessPiece) pawn31, "");
        a1.ChessPiece chessPiece35 = chessBoard26.getPiece("a1");
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard26, color36);
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard26, color38);
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook39, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str42 = rook39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(chessPiece35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test054");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        java.lang.String str18 = chessBoard16.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard16, color21);
        a1.ChessPiece chessPiece24 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard16, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        chessBoard29.initialize();
        java.lang.String str31 = chessBoard29.toString();
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard29, color32);
        java.util.ArrayList<java.lang.String> strList34 = bishop33.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop33, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color38 = null;
        a1.Queen queen39 = new a1.Queen(chessBoard0, color38);
        try {
            java.lang.String str40 = queen39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str31.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test055");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard3, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard3, color15);
        a1.ChessBoard chessBoard17 = null;
        a1.ChessPiece.Color color18 = null;
        a1.Knight knight19 = new a1.Knight(chessBoard17, color18);
        java.lang.String str20 = knight19.getPosition();
        a1.ChessPiece.Color color21 = knight19.getColor();
        boolean boolean23 = chessBoard3.placePiece((a1.ChessPiece) knight19, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard3, color24);
        king25.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList28 = king25.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) king25, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass31 = chessBoard0.getClass();
        a1.ChessPiece chessPiece33 = chessBoard0.getPiece("a1");
        try {
            a1.ChessPiece chessPiece35 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNull(chessPiece33);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test056");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = chessBoard0.getClass();
        chessBoard0.initialize();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test057");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        try {
            java.lang.String str28 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test058");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = king15.legalMoves();
        a1.ChessPiece.Color color18 = king15.getColor();
        java.util.ArrayList<java.lang.String> strList19 = king15.legalMoves();
        a1.ChessPiece.Color color20 = king15.getColor();
        try {
            java.lang.String str21 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(color20);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test059");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook6.legalMoves();
        java.lang.String str11 = rook6.getPosition();
        java.lang.String str12 = rook6.getPosition();
        java.lang.Class<?> wildcardClass13 = rook6.getClass();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test060");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test061");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = rook10.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = rook10.legalMoves();
        try {
            java.lang.String str13 = rook10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test062");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        try {
            java.lang.String str9 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test063");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = pawn8.legalMoves();
        try {
            java.lang.String str10 = pawn8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test064");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test065");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        java.lang.String str3 = bishop2.getPosition();
        java.lang.String str4 = bishop2.getPosition();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1" + "'", str4.equals("a1"));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test066");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Bishop bishop54 = new a1.Bishop(chessBoard0, color53);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        java.lang.String str56 = bishop54.getPosition();
        java.lang.String str57 = bishop54.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "a1" + "'", str56.equals("a1"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "a1" + "'", str57.equals("a1"));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test067");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test068");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard8, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard8, color17);
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) king18, "a1");
        try {
            chessBoard0.move("", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test069");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece chessPiece17 = null;
        boolean boolean19 = chessBoard0.placePiece(chessPiece17, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard0, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        boolean boolean29 = chessBoard22.placePiece((a1.ChessPiece) pawn27, "");
        chessBoard22.initialize();
        java.lang.String str31 = chessBoard22.toString();
        java.lang.String str32 = chessBoard22.toString();
        a1.ChessBoard chessBoard33 = new a1.ChessBoard();
        a1.ChessPiece.Color color34 = null;
        a1.Bishop bishop35 = new a1.Bishop(chessBoard33, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard36, color37);
        boolean boolean40 = chessBoard33.placePiece((a1.ChessPiece) pawn38, "");
        a1.ChessPiece chessPiece42 = chessBoard33.getPiece("a1");
        a1.ChessPiece.Color color43 = null;
        a1.Bishop bishop44 = new a1.Bishop(chessBoard33, color43);
        a1.ChessPiece.Color color45 = null;
        a1.Queen queen46 = new a1.Queen(chessBoard33, color45);
        a1.ChessBoard chessBoard47 = null;
        a1.ChessPiece.Color color48 = null;
        a1.Knight knight49 = new a1.Knight(chessBoard47, color48);
        java.lang.String str50 = knight49.getPosition();
        a1.ChessPiece.Color color51 = knight49.getColor();
        boolean boolean53 = chessBoard33.placePiece((a1.ChessPiece) knight49, "a1");
        a1.ChessPiece.Color color54 = null;
        a1.King king55 = new a1.King(chessBoard33, color54);
        a1.ChessPiece.Color color56 = null;
        a1.Knight knight57 = new a1.Knight(chessBoard33, color56);
        boolean boolean59 = chessBoard22.placePiece((a1.ChessPiece) knight57, "a1");
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        chessBoard60.initialize();
        java.lang.String str62 = chessBoard60.toString();
        a1.ChessPiece.Color color63 = null;
        a1.Bishop bishop64 = new a1.Bishop(chessBoard60, color63);
        a1.ChessPiece.Color color65 = null;
        a1.King king66 = new a1.King(chessBoard60, color65);
        a1.ChessPiece chessPiece68 = chessBoard60.getPiece("a1");
        a1.ChessPiece.Color color69 = null;
        a1.Queen queen70 = new a1.Queen(chessBoard60, color69);
        a1.ChessPiece.Color color71 = queen70.getColor();
        java.util.ArrayList<java.lang.String> strList72 = queen70.legalMoves();
        boolean boolean74 = chessBoard22.placePiece((a1.ChessPiece) queen70, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color75 = null;
        a1.Knight knight76 = new a1.Knight(chessBoard22, color75);
        a1.ChessPiece.Color color77 = null;
        a1.Queen queen78 = new a1.Queen(chessBoard22, color77);
        boolean boolean80 = chessBoard0.placePiece((a1.ChessPiece) queen78, "a1");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str31.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str32.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(chessPiece42);
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "a1" + "'", str50.equals("a1"));
        org.junit.Assert.assertNull(color51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str62.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece68);
        org.junit.Assert.assertNull(color71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test070");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = rook13.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test071");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = queen10.getColor();
        java.util.ArrayList<java.lang.String> strList12 = queen10.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = queen10.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNull(color11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test072");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test073");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece chessPiece27 = chessBoard0.getPiece("a1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(chessPiece27);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test074");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.lang.String str7 = rook5.getPosition();
        try {
            rook5.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test075");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        java.lang.String str9 = pawn5.getPosition();
        a1.ChessPiece.Color color10 = pawn5.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1" + "'", str9.equals("a1"));
        org.junit.Assert.assertNull(color10);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test076");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard0, color8);
        try {
            java.lang.String str10 = pawn9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test077");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Knight knight6 = new a1.Knight(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test078");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard0, color25);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test079");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.lang.String str8 = rook6.getPosition();
        java.lang.Class<?> wildcardClass9 = rook6.getClass();
        try {
            java.lang.String str10 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1" + "'", str8.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test080");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        chessBoard0.initialize();
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test081");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        java.lang.String str18 = chessBoard0.toString();
        a1.ChessPiece.Color color19 = null;
        a1.King king20 = new a1.King(chessBoard0, color19);
        java.lang.String str21 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str21.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test082");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        chessBoard0.initialize();
        a1.ChessPiece chessPiece11 = chessBoard0.getPiece("a1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(chessPiece11);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test083");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        chessBoard10.initialize();
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard10, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) rook13, "");
        java.lang.Class<?> wildcardClass16 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test084");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard0, color22);
        try {
            bishop23.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test085");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        try {
            java.lang.String str16 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test086");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard21, color31);
        boolean boolean34 = chessBoard16.placePiece((a1.ChessPiece) pawn32, "a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "hi!");
        a1.ChessPiece.Color color39 = null;
        a1.Queen queen40 = new a1.Queen(chessBoard0, color39);
        try {
            chessBoard0.move("hi!", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test087");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece chessPiece17 = null;
        boolean boolean19 = chessBoard0.placePiece(chessPiece17, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        boolean boolean27 = chessBoard20.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessPiece chessPiece29 = chessBoard20.getPiece("a1");
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard20, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Queen queen33 = new a1.Queen(chessBoard20, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Bishop bishop35 = new a1.Bishop(chessBoard20, color34);
        a1.ChessPiece.Color color36 = null;
        a1.Queen queen37 = new a1.Queen(chessBoard20, color36);
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard20, color38);
        a1.ChessPiece.Color color40 = king39.getColor();
        boolean boolean42 = chessBoard0.placePiece((a1.ChessPiece) king39, "a1");
        try {
            java.lang.String str43 = king39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(chessPiece29);
        org.junit.Assert.assertNull(color40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test088");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = bishop13.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = bishop13.legalMoves();
        java.lang.Class<?> wildcardClass16 = bishop13.getClass();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test089");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece chessPiece15 = chessBoard6.getPiece("a1");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        chessBoard24.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard24, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook27.legalMoves();
        boolean boolean32 = chessBoard16.placePiece((a1.ChessPiece) rook27, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook27.legalMoves();
        boolean boolean36 = chessBoard6.placePiece((a1.ChessPiece) rook27, "");
        java.lang.String str37 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList38 = rook27.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) rook27, "a1");
        a1.ChessPiece.Color color41 = null;
        a1.Queen queen42 = new a1.Queen(chessBoard0, color41);
        try {
            java.lang.String str43 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(chessPiece15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "a1" + "'", str37.equals("a1"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test090");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        java.lang.Class<?> wildcardClass26 = chessBoard0.getClass();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard0, color27);
        a1.ChessPiece.Color color29 = null;
        a1.Knight knight30 = new a1.Knight(chessBoard0, color29);
        a1.ChessPiece.Color color31 = knight30.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(color31);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test091");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = knight15.getColor();
        java.util.ArrayList<java.lang.String> strList17 = knight15.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test092");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        java.lang.String str16 = chessBoard0.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test093");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        chessBoard0.initialize();
        a1.ChessPiece chessPiece5 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece.Color color14 = pawn11.getColor();
        java.lang.String str15 = pawn11.getPosition();
        java.util.ArrayList<java.lang.String> strList16 = pawn11.legalMoves();
        java.lang.Class<?> wildcardClass17 = pawn11.getClass();
        boolean boolean19 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        java.util.ArrayList<java.lang.String> strList20 = pawn11.legalMoves();
        try {
            java.lang.String str21 = pawn11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(chessPiece5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "a1" + "'", str15.equals("a1"));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test094");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        java.lang.Class<?> wildcardClass16 = rook15.getClass();
        a1.ChessPiece.Color color17 = rook15.getColor();
        a1.ChessPiece.Color color18 = rook15.getColor();
        try {
            java.lang.String str19 = rook15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNull(color17);
        org.junit.Assert.assertNull(color18);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test095");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = bishop12.legalMoves();
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test096");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard21, color31);
        boolean boolean34 = chessBoard16.placePiece((a1.ChessPiece) pawn32, "a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "hi!");
        a1.ChessPiece.Color color39 = null;
        a1.Queen queen40 = new a1.Queen(chessBoard0, color39);
        a1.ChessPiece.Color color41 = null;
        a1.Knight knight42 = new a1.Knight(chessBoard0, color41);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test097");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test098");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        chessBoard0.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        try {
            a1.ChessPiece chessPiece13 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test099");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        java.lang.String str38 = pawn35.getPosition();
        java.util.ArrayList<java.lang.String> strList39 = pawn35.legalMoves();
        java.util.ArrayList<java.lang.String> strList40 = pawn35.legalMoves();
        java.util.ArrayList<java.lang.String> strList41 = pawn35.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "a1" + "'", str38.equals("a1"));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList41);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test100");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        java.lang.Class<?> wildcardClass19 = chessBoard0.getClass();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard0, color20);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test101");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = bishop7.getClass();
        java.util.ArrayList<java.lang.String> strList9 = bishop7.legalMoves();
        java.lang.String str10 = bishop7.getPosition();
        try {
            java.lang.String str11 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a1" + "'", str10.equals("a1"));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test102");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        a1.ChessPiece.Color color36 = pawn35.getColor();
        java.util.ArrayList<java.lang.String> strList37 = pawn35.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(color36);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test103");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Knight knight7 = new a1.Knight(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        try {
            java.lang.String str10 = knight9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test104");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        java.lang.String str16 = chessBoard0.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str19 = chessBoard0.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test105");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        java.lang.String str18 = chessBoard0.toString();
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test106");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        chessBoard15.initialize();
        java.lang.String str17 = chessBoard15.toString();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard15, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        chessBoard20.initialize();
        java.lang.String str22 = chessBoard20.toString();
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard20, color23);
        java.lang.String str25 = chessBoard20.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Queen queen27 = new a1.Queen(chessBoard20, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard20, color28);
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard20, color30);
        boolean boolean33 = chessBoard15.placePiece((a1.ChessPiece) bishop31, "");
        java.util.ArrayList<java.lang.String> strList34 = bishop31.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop31, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str22.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test107");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.King king27 = new a1.King(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = king27.legalMoves();
        try {
            java.lang.String str29 = king27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test108");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        java.lang.String str18 = chessBoard16.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard16, color21);
        a1.ChessPiece chessPiece24 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard16, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard29, color30);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard32, color33);
        boolean boolean36 = chessBoard29.placePiece((a1.ChessPiece) pawn34, "");
        chessBoard29.initialize();
        java.lang.String str38 = chessBoard29.toString();
        java.lang.String str39 = chessBoard29.toString();
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard40, color41);
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Pawn pawn45 = new a1.Pawn(chessBoard43, color44);
        boolean boolean47 = chessBoard40.placePiece((a1.ChessPiece) pawn45, "");
        a1.ChessPiece chessPiece49 = chessBoard40.getPiece("a1");
        a1.ChessPiece.Color color50 = null;
        a1.Bishop bishop51 = new a1.Bishop(chessBoard40, color50);
        a1.ChessPiece.Color color52 = null;
        a1.Queen queen53 = new a1.Queen(chessBoard40, color52);
        a1.ChessBoard chessBoard54 = null;
        a1.ChessPiece.Color color55 = null;
        a1.Knight knight56 = new a1.Knight(chessBoard54, color55);
        java.lang.String str57 = knight56.getPosition();
        a1.ChessPiece.Color color58 = knight56.getColor();
        boolean boolean60 = chessBoard40.placePiece((a1.ChessPiece) knight56, "a1");
        a1.ChessPiece.Color color61 = null;
        a1.King king62 = new a1.King(chessBoard40, color61);
        a1.ChessPiece.Color color63 = null;
        a1.Knight knight64 = new a1.Knight(chessBoard40, color63);
        boolean boolean66 = chessBoard29.placePiece((a1.ChessPiece) knight64, "a1");
        a1.ChessBoard chessBoard67 = new a1.ChessBoard();
        chessBoard67.initialize();
        java.lang.String str69 = chessBoard67.toString();
        a1.ChessPiece.Color color70 = null;
        a1.Bishop bishop71 = new a1.Bishop(chessBoard67, color70);
        a1.ChessPiece.Color color72 = null;
        a1.King king73 = new a1.King(chessBoard67, color72);
        a1.ChessPiece chessPiece75 = chessBoard67.getPiece("a1");
        a1.ChessPiece.Color color76 = null;
        a1.Queen queen77 = new a1.Queen(chessBoard67, color76);
        a1.ChessPiece.Color color78 = queen77.getColor();
        java.util.ArrayList<java.lang.String> strList79 = queen77.legalMoves();
        boolean boolean81 = chessBoard29.placePiece((a1.ChessPiece) queen77, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard82 = new a1.ChessBoard();
        a1.ChessPiece.Color color83 = null;
        a1.Bishop bishop84 = new a1.Bishop(chessBoard82, color83);
        a1.ChessBoard chessBoard85 = new a1.ChessBoard();
        a1.ChessPiece.Color color86 = null;
        a1.Pawn pawn87 = new a1.Pawn(chessBoard85, color86);
        boolean boolean89 = chessBoard82.placePiece((a1.ChessPiece) pawn87, "");
        a1.ChessPiece.Color color90 = pawn87.getColor();
        java.lang.String str91 = pawn87.getPosition();
        java.util.ArrayList<java.lang.String> strList92 = pawn87.legalMoves();
        boolean boolean94 = chessBoard29.placePiece((a1.ChessPiece) pawn87, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color95 = pawn87.getColor();
        boolean boolean97 = chessBoard0.placePiece((a1.ChessPiece) pawn87, "a1");
        try {
            java.lang.String str98 = pawn87.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str38.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str39.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(chessPiece49);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "a1" + "'", str57.equals("a1"));
        org.junit.Assert.assertNull(color58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str69.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece75);
        org.junit.Assert.assertNull(color78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(color90);
        org.junit.Assert.assertTrue("'" + str91 + "' != '" + "a1" + "'", str91.equals("a1"));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(color95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test109");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.lang.String str13 = king12.getPosition();
        java.lang.String str14 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList15 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test110");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Rook rook31 = new a1.Rook(chessBoard0, color30);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Bishop bishop34 = new a1.Bishop(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        boolean boolean39 = chessBoard32.placePiece((a1.ChessPiece) pawn37, "");
        chessBoard32.initialize();
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard32, color41);
        java.util.ArrayList<java.lang.String> strList43 = pawn42.legalMoves();
        java.lang.Class<?> wildcardClass44 = pawn42.getClass();
        java.util.ArrayList<java.lang.String> strList45 = pawn42.legalMoves();
        java.util.ArrayList<java.lang.String> strList46 = pawn42.legalMoves();
        boolean boolean48 = chessBoard0.placePiece((a1.ChessPiece) pawn42, "a1");
        a1.ChessPiece.Color color49 = null;
        a1.King king50 = new a1.King(chessBoard0, color49);
        try {
            java.lang.String str51 = king50.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test111");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook3.legalMoves();
        a1.ChessPiece.Color color6 = rook3.getColor();
        java.util.ArrayList<java.lang.String> strList7 = rook3.legalMoves();
        try {
            java.lang.String str8 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(color6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test112");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        try {
            java.lang.String str14 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test113");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        java.lang.String str6 = bishop4.getPosition();
        java.lang.Class<?> wildcardClass7 = bishop4.getClass();
        java.util.ArrayList<java.lang.String> strList8 = bishop4.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = bishop4.legalMoves();
        a1.ChessPiece.Color color10 = bishop4.getColor();
        java.lang.Class<?> wildcardClass11 = bishop4.getClass();
        java.lang.String str12 = bishop4.getPosition();
        try {
            java.lang.String str13 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(color10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test114");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.lang.String str13 = king12.getPosition();
        java.lang.String str14 = king12.getPosition();
        try {
            java.lang.String str15 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test115");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.King king2 = new a1.King(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        try {
            a1.ChessPiece chessPiece6 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test116");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        java.lang.String str25 = knight24.getPosition();
        java.util.ArrayList<java.lang.String> strList26 = knight24.legalMoves();
        try {
            knight24.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "a1" + "'", str25.equals("a1"));
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test117");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList17 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = rook11.legalMoves();
        java.lang.Class<?> wildcardClass20 = strList19.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test118");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard0, color17);
        java.lang.String str19 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test119");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Pawn pawn23 = new a1.Pawn(chessBoard21, color22);
        boolean boolean25 = chessBoard18.placePiece((a1.ChessPiece) pawn23, "");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        chessBoard26.initialize();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard26, color28);
        java.util.ArrayList<java.lang.String> strList30 = rook29.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook29.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook29.legalMoves();
        boolean boolean34 = chessBoard18.placePiece((a1.ChessPiece) rook29, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color35 = null;
        a1.Knight knight36 = new a1.Knight(chessBoard18, color35);
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard18, color37);
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard18, color39);
        boolean boolean42 = chessBoard0.placePiece((a1.ChessPiece) rook40, "");
        java.util.ArrayList<java.lang.String> strList43 = rook40.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test120");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessPiece chessPiece29 = chessBoard0.getPiece("a1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece29);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test121");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test122");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test123");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        try {
            bishop10.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test124");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        try {
            a1.ChessPiece chessPiece9 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test125");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        java.lang.String str18 = chessBoard0.toString();
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test126");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard0, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Knight knight23 = new a1.Knight(chessBoard0, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard0, color24);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test127");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece chessPiece17 = null;
        boolean boolean19 = chessBoard0.placePiece(chessPiece17, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard0, color20);
        try {
            java.lang.String str22 = queen21.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test128");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test129");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = bishop17.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = bishop17.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test130");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = pawn8.getColor();
        java.lang.String str10 = pawn8.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNull(color9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a1" + "'", str10.equals("a1"));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test131");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard0, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard0, color27);
        try {
            java.lang.String str29 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test132");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.lang.String str7 = rook5.getPosition();
        a1.ChessPiece.Color color8 = rook5.getColor();
        java.util.ArrayList<java.lang.String> strList9 = rook5.legalMoves();
        try {
            java.lang.String str10 = rook5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test133");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard26, color27);
        java.lang.String str29 = knight28.getPosition();
        a1.ChessPiece.Color color30 = knight28.getColor();
        java.util.ArrayList<java.lang.String> strList31 = knight28.legalMoves();
        java.lang.Class<?> wildcardClass32 = knight28.getClass();
        java.util.ArrayList<java.lang.String> strList33 = knight28.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = knight28.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) knight28, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList37 = knight28.legalMoves();
        try {
            java.lang.String str38 = knight28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "a1" + "'", str29.equals("a1"));
        org.junit.Assert.assertNull(color30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test134");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.King king27 = new a1.King(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = king27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = king27.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test135");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Queen queen22 = new a1.Queen(chessBoard16, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard16, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        chessBoard25.initialize();
        java.lang.String str27 = chessBoard25.toString();
        a1.ChessPiece.Color color28 = null;
        a1.Knight knight29 = new a1.Knight(chessBoard25, color28);
        java.lang.String str30 = chessBoard25.toString();
        a1.ChessPiece.Color color31 = null;
        a1.Queen queen32 = new a1.Queen(chessBoard25, color31);
        java.lang.Class<?> wildcardClass33 = chessBoard25.getClass();
        a1.ChessPiece.Color color34 = null;
        a1.Queen queen35 = new a1.Queen(chessBoard25, color34);
        java.util.ArrayList<java.lang.String> strList36 = queen35.legalMoves();
        boolean boolean38 = chessBoard16.placePiece((a1.ChessPiece) queen35, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) queen35, "a1");
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard43 = new a1.ChessBoard();
        a1.ChessPiece.Color color44 = null;
        a1.Bishop bishop45 = new a1.Bishop(chessBoard43, color44);
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        a1.ChessPiece.Color color47 = null;
        a1.Pawn pawn48 = new a1.Pawn(chessBoard46, color47);
        boolean boolean50 = chessBoard43.placePiece((a1.ChessPiece) pawn48, "");
        a1.ChessPiece chessPiece52 = chessBoard43.getPiece("a1");
        a1.ChessPiece.Color color53 = null;
        a1.Bishop bishop54 = new a1.Bishop(chessBoard43, color53);
        java.lang.String str55 = chessBoard43.toString();
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard43, color56);
        a1.ChessPiece.Color color58 = null;
        a1.Knight knight59 = new a1.Knight(chessBoard43, color58);
        a1.ChessBoard chessBoard60 = new a1.ChessBoard();
        a1.ChessPiece.Color color61 = null;
        a1.Pawn pawn62 = new a1.Pawn(chessBoard60, color61);
        a1.ChessPiece.Color color63 = null;
        a1.Bishop bishop64 = new a1.Bishop(chessBoard60, color63);
        a1.ChessPiece.Color color65 = null;
        a1.Rook rook66 = new a1.Rook(chessBoard60, color65);
        java.util.ArrayList<java.lang.String> strList67 = rook66.legalMoves();
        java.lang.String str68 = rook66.getPosition();
        java.lang.Class<?> wildcardClass69 = rook66.getClass();
        boolean boolean71 = chessBoard43.placePiece((a1.ChessPiece) rook66, "a1");
        a1.ChessPiece.Color color72 = null;
        a1.Knight knight73 = new a1.Knight(chessBoard43, color72);
        boolean boolean75 = chessBoard0.placePiece((a1.ChessPiece) knight73, "a1");
        try {
            java.lang.String str76 = knight73.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str27.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str30.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(chessPiece52);
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str55.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "a1" + "'", str68.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test136");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard0, color19);
        try {
            java.lang.String str21 = queen20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test137");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.lang.String str13 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        try {
            java.lang.String str15 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test138");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        a1.ChessPiece.Color color8 = king6.getColor();
        java.util.ArrayList<java.lang.String> strList9 = king6.legalMoves();
        a1.ChessPiece.Color color10 = king6.getColor();
        a1.ChessPiece.Color color11 = king6.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(color10);
        org.junit.Assert.assertNull(color11);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test139");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        java.lang.String str33 = chessBoard0.toString();
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard0, color34);
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str33.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test140");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard0, color26);
        try {
            knight27.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test141");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Knight knight54 = new a1.Knight(chessBoard0, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        chessBoard55.initialize();
        java.lang.String str57 = chessBoard55.toString();
        a1.ChessPiece.Color color58 = null;
        a1.Knight knight59 = new a1.Knight(chessBoard55, color58);
        chessBoard55.initialize();
        chessBoard55.initialize();
        chessBoard55.initialize();
        a1.ChessPiece.Color color63 = null;
        a1.King king64 = new a1.King(chessBoard55, color63);
        a1.ChessPiece.Color color65 = null;
        a1.Knight knight66 = new a1.Knight(chessBoard55, color65);
        boolean boolean68 = chessBoard0.placePiece((a1.ChessPiece) knight66, "hi!");
        try {
            java.lang.String str69 = knight66.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str57.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test142");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard26, color27);
        java.lang.String str29 = knight28.getPosition();
        a1.ChessPiece.Color color30 = knight28.getColor();
        java.util.ArrayList<java.lang.String> strList31 = knight28.legalMoves();
        java.lang.Class<?> wildcardClass32 = knight28.getClass();
        java.util.ArrayList<java.lang.String> strList33 = knight28.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = knight28.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) knight28, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color37 = null;
        a1.King king38 = new a1.King(chessBoard0, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Bishop bishop41 = new a1.Bishop(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        boolean boolean46 = chessBoard39.placePiece((a1.ChessPiece) pawn44, "");
        a1.ChessPiece chessPiece48 = chessBoard39.getPiece("a1");
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard39, color49);
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard39, color51);
        java.lang.String str53 = chessBoard39.toString();
        a1.ChessPiece.Color color54 = null;
        a1.Rook rook55 = new a1.Rook(chessBoard39, color54);
        a1.ChessPiece.Color color56 = null;
        a1.Bishop bishop57 = new a1.Bishop(chessBoard39, color56);
        a1.ChessPiece.Color color58 = null;
        a1.Rook rook59 = new a1.Rook(chessBoard39, color58);
        boolean boolean61 = chessBoard0.placePiece((a1.ChessPiece) rook59, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "a1" + "'", str29.equals("a1"));
        org.junit.Assert.assertNull(color30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(chessPiece48);
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str53.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test143");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        java.util.ArrayList<java.lang.String> strList24 = king23.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test144");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.King king10 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = king10.legalMoves();
        try {
            java.lang.String str12 = king10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test145");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        chessBoard15.initialize();
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard15, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard15, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Rook rook22 = new a1.Rook(chessBoard15, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard15, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard15, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "a1");
        try {
            java.lang.String str29 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test146");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test147");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = bishop2.legalMoves();
        a1.ChessPiece.Color color4 = bishop2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = bishop2.legalMoves();
        a1.ChessPiece.Color color6 = bishop2.getColor();
        java.util.ArrayList<java.lang.String> strList7 = bishop2.legalMoves();
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(color6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test148");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        java.lang.String str16 = chessBoard0.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        java.lang.String str19 = chessBoard0.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test149");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        java.lang.String str18 = chessBoard0.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard0, color19);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test150");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = pawn11.getColor();
        java.util.ArrayList<java.lang.String> strList13 = pawn11.legalMoves();
        java.lang.String str14 = pawn11.getPosition();
        java.util.ArrayList<java.lang.String> strList15 = pawn11.legalMoves();
        try {
            pawn11.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test151");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard0, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard0, color27);
        try {
            java.lang.String str29 = rook28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test152");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        boolean boolean24 = chessBoard17.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessPiece chessPiece26 = chessBoard17.getPiece("a1");
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard17, color27);
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) bishop28, "a1");
        a1.ChessPiece.Color color31 = null;
        a1.King king32 = new a1.King(chessBoard0, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Queen queen34 = new a1.Queen(chessBoard0, color33);
        try {
            queen34.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chessPiece26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test153");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard0, color18);
        try {
            chessBoard0.move("hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test154");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard8, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece chessPiece22 = chessBoard13.getPiece("a1");
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard13, color23);
        boolean boolean26 = chessBoard8.placePiece((a1.ChessPiece) pawn24, "a1");
        java.util.ArrayList<java.lang.String> strList27 = pawn24.legalMoves();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chessPiece22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test155");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard0, color15);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test156");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test157");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard26, color27);
        java.lang.String str29 = knight28.getPosition();
        a1.ChessPiece.Color color30 = knight28.getColor();
        java.util.ArrayList<java.lang.String> strList31 = knight28.legalMoves();
        java.lang.Class<?> wildcardClass32 = knight28.getClass();
        java.util.ArrayList<java.lang.String> strList33 = knight28.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = knight28.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) knight28, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        chessBoard0.initialize();
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "a1" + "'", str29.equals("a1"));
        org.junit.Assert.assertNull(color30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test158");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.lang.Class<?> wildcardClass7 = chessBoard0.getClass();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = king9.legalMoves();
        try {
            java.lang.String str11 = king9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test159");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard0, color38);
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard0, color40);
        a1.ChessPiece.Color color42 = null;
        a1.Bishop bishop43 = new a1.Bishop(chessBoard0, color42);
        a1.ChessBoard chessBoard44 = new a1.ChessBoard();
        a1.ChessPiece.Color color45 = null;
        a1.Bishop bishop46 = new a1.Bishop(chessBoard44, color45);
        a1.ChessBoard chessBoard47 = new a1.ChessBoard();
        a1.ChessPiece.Color color48 = null;
        a1.Pawn pawn49 = new a1.Pawn(chessBoard47, color48);
        boolean boolean51 = chessBoard44.placePiece((a1.ChessPiece) pawn49, "");
        a1.ChessPiece chessPiece53 = chessBoard44.getPiece("a1");
        a1.ChessPiece.Color color54 = null;
        a1.Bishop bishop55 = new a1.Bishop(chessBoard44, color54);
        a1.ChessPiece.Color color56 = null;
        a1.Queen queen57 = new a1.Queen(chessBoard44, color56);
        a1.ChessPiece.Color color58 = null;
        a1.King king59 = new a1.King(chessBoard44, color58);
        java.util.ArrayList<java.lang.String> strList60 = king59.legalMoves();
        java.util.ArrayList<java.lang.String> strList61 = king59.legalMoves();
        a1.ChessPiece.Color color62 = king59.getColor();
        java.util.ArrayList<java.lang.String> strList63 = king59.legalMoves();
        a1.ChessPiece.Color color64 = king59.getColor();
        boolean boolean66 = chessBoard0.placePiece((a1.ChessPiece) king59, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(chessPiece53);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(color62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNull(color64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test160");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        try {
            java.lang.String str15 = queen14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test161");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        try {
            java.lang.String str10 = bishop8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test162");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.lang.String str7 = rook5.getPosition();
        a1.ChessPiece.Color color8 = rook5.getColor();
        java.util.ArrayList<java.lang.String> strList9 = rook5.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook5.legalMoves();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test163");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Knight knight20 = new a1.Knight(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard0, color21);
        try {
            java.lang.String str23 = pawn22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test164");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = queen8.legalMoves();
        java.lang.String str10 = queen8.getPosition();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a1" + "'", str10.equals("a1"));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test165");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard8, color11);
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) pawn12, "a1");
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        try {
            java.lang.String str19 = king18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test166");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Knight knight29 = new a1.Knight(chessBoard0, color28);
        chessBoard0.initialize();
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard0, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Knight knight34 = new a1.Knight(chessBoard0, color33);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test167");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece chessPiece15 = chessBoard6.getPiece("a1");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        chessBoard24.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard24, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook27.legalMoves();
        boolean boolean32 = chessBoard16.placePiece((a1.ChessPiece) rook27, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook27.legalMoves();
        boolean boolean36 = chessBoard6.placePiece((a1.ChessPiece) rook27, "");
        java.lang.String str37 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList38 = rook27.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) rook27, "a1");
        a1.ChessPiece.Color color41 = null;
        a1.Queen queen42 = new a1.Queen(chessBoard0, color41);
        try {
            a1.ChessPiece chessPiece44 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(chessPiece15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "a1" + "'", str37.equals("a1"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test168");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        java.lang.String str8 = rook7.getPosition();
        a1.ChessPiece.Color color9 = rook7.getColor();
        try {
            java.lang.String str10 = rook7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1" + "'", str8.equals("a1"));
        org.junit.Assert.assertNull(color9);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test169");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard0, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Queen queen34 = new a1.Queen(chessBoard0, color33);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test170");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        try {
            java.lang.String str17 = pawn16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test171");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        chessBoard6.initialize();
        java.lang.String str8 = chessBoard6.toString();
        java.lang.String str9 = chessBoard6.toString();
        chessBoard6.initialize();
        java.lang.Class<?> wildcardClass11 = chessBoard6.getClass();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard6, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) bishop13, "a1");
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str8.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test172");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.lang.String str22 = pawn21.getPosition();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "a1" + "'", str22.equals("a1"));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test173");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook6.legalMoves();
        java.lang.String str11 = rook6.getPosition();
        java.lang.Class<?> wildcardClass12 = rook6.getClass();
        java.util.ArrayList<java.lang.String> strList13 = rook6.legalMoves();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test174");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard8, color11);
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) pawn12, "a1");
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test175");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Knight knight54 = new a1.Knight(chessBoard0, color53);
        try {
            java.lang.String str55 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test176");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard0, color38);
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard0, color40);
        a1.ChessPiece.Color color42 = null;
        a1.Bishop bishop43 = new a1.Bishop(chessBoard0, color42);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test177");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = knight13.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test178");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Knight knight7 = new a1.Knight(chessBoard0, color6);
        try {
            knight7.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test179");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass7 = knight4.getClass();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = knight4.legalMoves();
        a1.ChessPiece.Color color10 = knight4.getColor();
        java.lang.Class<?> wildcardClass11 = knight4.getClass();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(color10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test180");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        a1.ChessPiece.Color color36 = null;
        a1.Bishop bishop37 = new a1.Bishop(chessBoard0, color36);
        a1.ChessPiece.Color color38 = null;
        a1.Queen queen39 = new a1.Queen(chessBoard0, color38);
        a1.ChessPiece.Color color40 = null;
        a1.Bishop bishop41 = new a1.Bishop(chessBoard0, color40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test181");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        java.lang.String str20 = rook19.getPosition();
        java.lang.Class<?> wildcardClass21 = rook19.getClass();
        a1.ChessPiece.Color color22 = rook19.getColor();
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNull(color22);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test182");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        java.lang.Class<?> wildcardClass16 = pawn15.getClass();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test183");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = queen9.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test184");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard3, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard3, color15);
        a1.ChessBoard chessBoard17 = null;
        a1.ChessPiece.Color color18 = null;
        a1.Knight knight19 = new a1.Knight(chessBoard17, color18);
        java.lang.String str20 = knight19.getPosition();
        a1.ChessPiece.Color color21 = knight19.getColor();
        boolean boolean23 = chessBoard3.placePiece((a1.ChessPiece) knight19, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard3, color24);
        king25.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList28 = king25.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) king25, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass31 = chessBoard0.getClass();
        try {
            a1.ChessPiece chessPiece33 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test185");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        try {
            java.lang.String str28 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test186");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = bishop15.legalMoves();
        java.lang.String str17 = bishop15.getPosition();
        try {
            bishop15.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test187");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        try {
            chessBoard0.move("", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test188");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard28, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard28, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard28, color33);
        java.lang.String str35 = chessBoard28.toString();
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard28, color36);
        java.util.ArrayList<java.lang.String> strList38 = king37.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) king37, "hi!");
        a1.ChessPiece.Color color41 = null;
        a1.Rook rook42 = new a1.Rook(chessBoard0, color41);
        a1.ChessPiece.Color color43 = null;
        a1.Rook rook44 = new a1.Rook(chessBoard0, color43);
        a1.ChessPiece.Color color45 = null;
        a1.Pawn pawn46 = new a1.Pawn(chessBoard0, color45);
        try {
            java.lang.String str47 = pawn46.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str35.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test189");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard0, color18);
        try {
            java.lang.String str20 = bishop19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test190");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        try {
            bishop20.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test191");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test192");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass7 = knight4.getClass();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = knight4.legalMoves();
        a1.ChessPiece.Color color10 = knight4.getColor();
        java.util.ArrayList<java.lang.String> strList11 = knight4.legalMoves();
        a1.ChessPiece.Color color12 = knight4.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(color10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(color12);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test193");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard0, color25);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test194");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str23 = queen20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test195");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        chessBoard0.initialize();
        a1.ChessBoard chessBoard31 = null;
        a1.ChessPiece.Color color32 = null;
        a1.Knight knight33 = new a1.Knight(chessBoard31, color32);
        java.lang.String str34 = knight33.getPosition();
        java.util.ArrayList<java.lang.String> strList35 = knight33.legalMoves();
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight33, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            knight33.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "a1" + "'", str34.equals("a1"));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test196");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Knight knight20 = new a1.Knight(chessBoard0, color19);
        try {
            chessBoard0.move("a1", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test197");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        try {
            a1.ChessPiece chessPiece17 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test198");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard0, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard0, color27);
        a1.ChessPiece.Color color29 = null;
        a1.King king30 = new a1.King(chessBoard0, color29);
        try {
            java.lang.String str31 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test199");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        try {
            java.lang.String str6 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test200");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = pawn16.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = pawn16.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test201");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        try {
            a1.ChessPiece chessPiece13 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test202");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        chessBoard0.initialize();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        try {
            java.lang.String str21 = bishop20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test203");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        chessBoard25.initialize();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard25, color27);
        java.util.ArrayList<java.lang.String> strList29 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook28.legalMoves();
        boolean boolean35 = chessBoard0.placePiece((a1.ChessPiece) rook28, "");
        a1.ChessPiece.Color color36 = rook28.getColor();
        try {
            java.lang.String str37 = rook28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(color36);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test204");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = rook16.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test205");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessPiece.Color color28 = bishop27.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNull(color28);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test206");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test207");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        a1.ChessPiece.Color color6 = bishop4.getColor();
        try {
            java.lang.String str7 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(color6);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test208");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        java.lang.Class<?> wildcardClass16 = rook15.getClass();
        java.util.ArrayList<java.lang.String> strList17 = rook15.legalMoves();
        a1.ChessPiece.Color color18 = rook15.getColor();
        try {
            java.lang.String str19 = rook15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(color18);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test209");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Knight knight17 = new a1.Knight(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard18, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard18, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Bishop bishop25 = new a1.Bishop(chessBoard23, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        boolean boolean30 = chessBoard23.placePiece((a1.ChessPiece) pawn28, "");
        a1.ChessPiece chessPiece32 = chessBoard23.getPiece("a1");
        a1.ChessPiece.Color color33 = null;
        a1.Pawn pawn34 = new a1.Pawn(chessBoard23, color33);
        boolean boolean36 = chessBoard18.placePiece((a1.ChessPiece) pawn34, "a1");
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) pawn34, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList39 = pawn34.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(chessPiece32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test210");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        java.lang.Class<?> wildcardClass11 = queen10.getClass();
        java.util.ArrayList<java.lang.String> strList12 = queen10.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test211");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        java.util.ArrayList<java.lang.String> strList26 = king25.legalMoves();
        try {
            java.lang.String str27 = king25.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test212");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        a1.ChessPiece.Color color12 = bishop10.getColor();
        java.lang.String str13 = bishop10.getPosition();
        try {
            java.lang.String str14 = bishop10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
        org.junit.Assert.assertNull(color12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test213");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.King king20 = new a1.King(chessBoard0, color19);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test214");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        chessBoard0.initialize();
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        boolean boolean22 = chessBoard15.placePiece((a1.ChessPiece) pawn20, "");
        a1.ChessPiece chessPiece24 = chessBoard15.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard15, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard15, color27);
        java.util.ArrayList<java.lang.String> strList29 = knight28.legalMoves();
        boolean boolean31 = chessBoard0.placePiece((a1.ChessPiece) knight28, "a1");
        java.util.ArrayList<java.lang.String> strList32 = knight28.legalMoves();
        try {
            java.lang.String str33 = knight28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(chessPiece24);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test215");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.lang.String str13 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        try {
            java.lang.String str15 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test216");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass7 = knight4.getClass();
        java.lang.Class<?> wildcardClass8 = knight4.getClass();
        try {
            java.lang.String str9 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test217");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard18, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Pawn pawn23 = new a1.Pawn(chessBoard21, color22);
        boolean boolean25 = chessBoard18.placePiece((a1.ChessPiece) pawn23, "");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        chessBoard26.initialize();
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard26, color28);
        java.util.ArrayList<java.lang.String> strList30 = rook29.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook29.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook29.legalMoves();
        boolean boolean34 = chessBoard18.placePiece((a1.ChessPiece) rook29, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color35 = null;
        a1.Knight knight36 = new a1.Knight(chessBoard18, color35);
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard18, color37);
        a1.ChessPiece.Color color39 = null;
        a1.Rook rook40 = new a1.Rook(chessBoard18, color39);
        boolean boolean42 = chessBoard0.placePiece((a1.ChessPiece) rook40, "");
        java.lang.Class<?> wildcardClass43 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test218");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.lang.String str8 = rook6.getPosition();
        java.lang.Class<?> wildcardClass9 = rook6.getClass();
        java.util.ArrayList<java.lang.String> strList10 = rook6.legalMoves();
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1" + "'", str8.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test219");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList8 = bishop7.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = bishop7.legalMoves();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test220");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = knight18.getPosition();
        java.util.ArrayList<java.lang.String> strList20 = knight18.legalMoves();
        java.lang.Class<?> wildcardClass21 = knight18.getClass();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) knight18, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color24 = knight18.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "a1" + "'", str19.equals("a1"));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(color24);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test221");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        chessBoard0.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList12 = knight11.legalMoves();
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test222");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        java.lang.Class<?> wildcardClass13 = pawn12.getClass();
        java.util.ArrayList<java.lang.String> strList14 = pawn12.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test223");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        chessBoard0.initialize();
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = queen13.legalMoves();
        try {
            java.lang.String str16 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test224");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        java.lang.Class<?> wildcardClass32 = queen31.getClass();
        a1.ChessPiece.Color color33 = queen31.getColor();
        java.util.ArrayList<java.lang.String> strList34 = queen31.legalMoves();
        java.util.ArrayList<java.lang.String> strList35 = queen31.legalMoves();
        a1.ChessPiece.Color color36 = queen31.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(color33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(color36);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test225");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard0, color38);
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard0, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = null;
        a1.Bishop bishop44 = new a1.Bishop(chessBoard42, color43);
        a1.ChessBoard chessBoard45 = new a1.ChessBoard();
        a1.ChessPiece.Color color46 = null;
        a1.Pawn pawn47 = new a1.Pawn(chessBoard45, color46);
        boolean boolean49 = chessBoard42.placePiece((a1.ChessPiece) pawn47, "");
        a1.ChessPiece chessPiece51 = chessBoard42.getPiece("a1");
        a1.ChessPiece.Color color52 = null;
        a1.Bishop bishop53 = new a1.Bishop(chessBoard42, color52);
        a1.ChessPiece.Color color54 = null;
        a1.Queen queen55 = new a1.Queen(chessBoard42, color54);
        a1.ChessBoard chessBoard56 = null;
        a1.ChessPiece.Color color57 = null;
        a1.Knight knight58 = new a1.Knight(chessBoard56, color57);
        java.lang.String str59 = knight58.getPosition();
        a1.ChessPiece.Color color60 = knight58.getColor();
        boolean boolean62 = chessBoard42.placePiece((a1.ChessPiece) knight58, "a1");
        a1.ChessPiece.Color color63 = null;
        a1.Bishop bishop64 = new a1.Bishop(chessBoard42, color63);
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard42, color65);
        a1.ChessPiece.Color color67 = null;
        a1.King king68 = new a1.King(chessBoard42, color67);
        java.lang.String str69 = king68.getPosition();
        boolean boolean71 = chessBoard0.placePiece((a1.ChessPiece) king68, "");
        java.util.ArrayList<java.lang.String> strList72 = king68.legalMoves();
        try {
            java.lang.String str73 = king68.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(chessPiece51);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "a1" + "'", str59.equals("a1"));
        org.junit.Assert.assertNull(color60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "a1" + "'", str69.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test226");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = rook17.legalMoves();
        try {
            java.lang.String str19 = rook17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test227");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Knight knight17 = new a1.Knight(chessBoard0, color16);
        try {
            a1.ChessPiece chessPiece19 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test228");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard0, color26);
        java.lang.String str28 = knight27.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test229");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard0, color26);
        try {
            a1.ChessPiece chessPiece29 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test230");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = chessBoard0.getClass();
        java.lang.String str10 = chessBoard0.toString();
        chessBoard0.initialize();
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test231");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        try {
            a1.ChessPiece chessPiece24 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test232");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        java.util.ArrayList<java.lang.String> strList18 = queen15.legalMoves();
        java.lang.Class<?> wildcardClass19 = queen15.getClass();
        java.util.ArrayList<java.lang.String> strList20 = queen15.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test233");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str17 = chessBoard0.toString();
        a1.ChessPiece.Color color18 = null;
        a1.Pawn pawn19 = new a1.Pawn(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.King king21 = new a1.King(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList22 = king21.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test234");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Bishop bishop55 = new a1.Bishop(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        boolean boolean60 = chessBoard53.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessPiece.Color color61 = pawn58.getColor();
        java.lang.String str62 = pawn58.getPosition();
        java.util.ArrayList<java.lang.String> strList63 = pawn58.legalMoves();
        boolean boolean65 = chessBoard0.placePiece((a1.ChessPiece) pawn58, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard66 = new a1.ChessBoard();
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard66, color67);
        a1.ChessPiece.Color color69 = null;
        a1.Bishop bishop70 = new a1.Bishop(chessBoard66, color69);
        java.util.ArrayList<java.lang.String> strList71 = bishop70.legalMoves();
        java.lang.String str72 = bishop70.getPosition();
        java.lang.Class<?> wildcardClass73 = bishop70.getClass();
        java.util.ArrayList<java.lang.String> strList74 = bishop70.legalMoves();
        boolean boolean76 = chessBoard0.placePiece((a1.ChessPiece) bishop70, "");
        try {
            java.lang.String str77 = bishop70.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(color61);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "a1" + "'", str62.equals("a1"));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "a1" + "'", str72.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test235");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        java.lang.String str18 = bishop17.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "a1" + "'", str18.equals("a1"));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test236");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test237");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        chessBoard0.initialize();
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test238");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard0, color23);
        try {
            java.lang.String str25 = rook24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test239");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece chessPiece15 = chessBoard6.getPiece("a1");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        chessBoard24.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard24, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook27.legalMoves();
        boolean boolean32 = chessBoard16.placePiece((a1.ChessPiece) rook27, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook27.legalMoves();
        boolean boolean36 = chessBoard6.placePiece((a1.ChessPiece) rook27, "");
        java.lang.String str37 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList38 = rook27.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) rook27, "a1");
        a1.ChessPiece.Color color41 = null;
        a1.Queen queen42 = new a1.Queen(chessBoard0, color41);
        a1.ChessPiece.Color color43 = null;
        a1.Rook rook44 = new a1.Rook(chessBoard0, color43);
        java.util.ArrayList<java.lang.String> strList45 = rook44.legalMoves();
        a1.ChessPiece.Color color46 = rook44.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(chessPiece15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "a1" + "'", str37.equals("a1"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(color46);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test240");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        java.lang.String str5 = queen4.getPosition();
        java.lang.String str6 = queen4.getPosition();
        try {
            java.lang.String str7 = queen4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test241");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = null;
        a1.Pawn pawn33 = new a1.Pawn(chessBoard31, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard31, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        java.lang.String str38 = chessBoard0.toString();
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Bishop bishop41 = new a1.Bishop(chessBoard39, color40);
        a1.ChessBoard chessBoard42 = new a1.ChessBoard();
        a1.ChessPiece.Color color43 = null;
        a1.Pawn pawn44 = new a1.Pawn(chessBoard42, color43);
        boolean boolean46 = chessBoard39.placePiece((a1.ChessPiece) pawn44, "");
        a1.ChessPiece chessPiece48 = chessBoard39.getPiece("a1");
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard39, color49);
        a1.ChessPiece.Color color51 = null;
        a1.Pawn pawn52 = new a1.Pawn(chessBoard39, color51);
        a1.ChessPiece.Color color53 = null;
        a1.King king54 = new a1.King(chessBoard39, color53);
        a1.ChessPiece.Color color55 = null;
        a1.Bishop bishop56 = new a1.Bishop(chessBoard39, color55);
        boolean boolean58 = chessBoard0.placePiece((a1.ChessPiece) bishop56, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str38.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(chessPiece48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test242");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        try {
            a1.ChessPiece chessPiece22 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test243");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = null;
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard26, color27);
        java.lang.String str29 = knight28.getPosition();
        a1.ChessPiece.Color color30 = knight28.getColor();
        java.util.ArrayList<java.lang.String> strList31 = knight28.legalMoves();
        java.lang.Class<?> wildcardClass32 = knight28.getClass();
        java.util.ArrayList<java.lang.String> strList33 = knight28.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = knight28.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) knight28, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str37 = knight28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "a1" + "'", str29.equals("a1"));
        org.junit.Assert.assertNull(color30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test244");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        try {
            rook20.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test245");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        try {
            bishop17.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test246");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard0, color13);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test247");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        java.lang.Class<?> wildcardClass15 = queen13.getClass();
        java.lang.String str16 = queen13.getPosition();
        try {
            java.lang.String str17 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "a1" + "'", str16.equals("a1"));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test248");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = queen6.getColor();
        try {
            java.lang.Class<?> wildcardClass8 = color7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(color7);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test249");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test250");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        java.lang.String str18 = chessBoard16.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard16, color21);
        a1.ChessPiece chessPiece24 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard16, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        chessBoard29.initialize();
        java.lang.String str31 = chessBoard29.toString();
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard29, color32);
        java.util.ArrayList<java.lang.String> strList34 = bishop33.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop33, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard0, color38);
        try {
            king39.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str31.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test251");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test252");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = queen13.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = queen13.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test253");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = queen17.legalMoves();
        try {
            java.lang.String str19 = queen17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test254");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard14, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard14, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard14, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Pawn pawn23 = new a1.Pawn(chessBoard14, color22);
        boolean boolean25 = chessBoard0.placePiece((a1.ChessPiece) pawn23, "a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = bishop27.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test255");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        chessBoard0.initialize();
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = knight13.legalMoves();
        try {
            java.lang.String str15 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test256");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = bishop7.getClass();
        try {
            java.lang.String str9 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test257");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard21, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Queen queen34 = new a1.Queen(chessBoard21, color33);
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard21, color35);
        a1.ChessBoard chessBoard37 = new a1.ChessBoard();
        a1.ChessPiece.Color color38 = null;
        a1.Bishop bishop39 = new a1.Bishop(chessBoard37, color38);
        a1.ChessBoard chessBoard40 = new a1.ChessBoard();
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard40, color41);
        boolean boolean44 = chessBoard37.placePiece((a1.ChessPiece) pawn42, "");
        a1.ChessPiece chessPiece46 = chessBoard37.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Bishop bishop48 = new a1.Bishop(chessBoard37, color47);
        java.lang.String str49 = chessBoard37.toString();
        a1.ChessPiece.Color color50 = null;
        a1.Bishop bishop51 = new a1.Bishop(chessBoard37, color50);
        a1.ChessPiece.Color color52 = null;
        a1.Rook rook53 = new a1.Rook(chessBoard37, color52);
        a1.ChessPiece chessPiece55 = chessBoard37.getPiece("a1");
        a1.ChessPiece.Color color56 = null;
        a1.Rook rook57 = new a1.Rook(chessBoard37, color56);
        boolean boolean59 = chessBoard21.placePiece((a1.ChessPiece) rook57, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color60 = rook57.getColor();
        java.util.ArrayList<java.lang.String> strList61 = rook57.legalMoves();
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) rook57, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList64 = rook57.legalMoves();
        java.lang.String str65 = rook57.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(chessPiece46);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str49.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(chessPiece55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(color60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "a1" + "'", str65.equals("a1"));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test258");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Knight knight20 = new a1.Knight(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = knight20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) knight20, "");
        try {
            chessBoard0.move("", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test259");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        chessBoard0.initialize();
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test260");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard0, color25);
        java.util.ArrayList<java.lang.String> strList27 = rook26.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test261");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.King king20 = new a1.King(chessBoard0, color19);
        java.util.ArrayList<java.lang.String> strList21 = king20.legalMoves();
        try {
            java.lang.String str22 = king20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test262");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard0, color8);
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test263");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Queen queen54 = new a1.Queen(chessBoard0, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Bishop bishop57 = new a1.Bishop(chessBoard55, color56);
        a1.ChessBoard chessBoard58 = new a1.ChessBoard();
        a1.ChessPiece.Color color59 = null;
        a1.Pawn pawn60 = new a1.Pawn(chessBoard58, color59);
        boolean boolean62 = chessBoard55.placePiece((a1.ChessPiece) pawn60, "");
        a1.ChessPiece chessPiece64 = chessBoard55.getPiece("a1");
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard55, color65);
        a1.ChessPiece.Color color67 = null;
        a1.Pawn pawn68 = new a1.Pawn(chessBoard55, color67);
        java.lang.String str69 = chessBoard55.toString();
        a1.ChessPiece.Color color70 = null;
        a1.King king71 = new a1.King(chessBoard55, color70);
        java.util.ArrayList<java.lang.String> strList72 = king71.legalMoves();
        boolean boolean74 = chessBoard0.placePiece((a1.ChessPiece) king71, "a1");
        java.util.ArrayList<java.lang.String> strList75 = king71.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(chessPiece64);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str69.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test264");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        java.lang.String str6 = bishop4.getPosition();
        java.lang.Class<?> wildcardClass7 = bishop4.getClass();
        try {
            java.lang.String str8 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test265");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = rook17.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test266");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        java.lang.String str6 = bishop4.getPosition();
        java.lang.Class<?> wildcardClass7 = bishop4.getClass();
        java.util.ArrayList<java.lang.String> strList8 = bishop4.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = bishop4.legalMoves();
        a1.ChessPiece.Color color10 = bishop4.getColor();
        java.lang.Class<?> wildcardClass11 = bishop4.getClass();
        java.lang.String str12 = bishop4.getPosition();
        a1.ChessPiece.Color color13 = bishop4.getColor();
        try {
            java.lang.String str14 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(color10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
        org.junit.Assert.assertNull(color13);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test267");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessPiece.Color color26 = king25.getColor();
        java.util.ArrayList<java.lang.String> strList27 = king25.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = king25.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNull(color26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test268");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        chessBoard0.initialize();
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        try {
            java.lang.String str14 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test269");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = knight13.legalMoves();
        java.lang.String str15 = knight13.getPosition();
        try {
            java.lang.String str16 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "a1" + "'", str15.equals("a1"));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test270");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test271");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece chessPiece17 = null;
        boolean boolean19 = chessBoard0.placePiece(chessPiece17, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList22 = queen21.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test272");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test273");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = pawn17.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test274");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        chessBoard10.initialize();
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard10, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) rook13, "");
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test275");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.King king21 = new a1.King(chessBoard0, color20);
        chessBoard0.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        try {
            java.lang.String str25 = knight24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test276");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test277");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessPiece chessPiece28 = chessBoard19.getPiece("a1");
        a1.ChessPiece.Color color29 = null;
        a1.Pawn pawn30 = new a1.Pawn(chessBoard19, color29);
        a1.ChessPiece.Color color31 = pawn30.getColor();
        java.util.ArrayList<java.lang.String> strList32 = pawn30.legalMoves();
        boolean boolean34 = chessBoard0.placePiece((a1.ChessPiece) pawn30, "");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard0, color35);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(chessPiece28);
        org.junit.Assert.assertNull(color31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test278");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessBoard chessBoard2 = new a1.ChessBoard();
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard2, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard2, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard2, color7);
        a1.ChessBoard chessBoard9 = null;
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard9, color10);
        java.lang.Class<?> wildcardClass12 = knight11.getClass();
        boolean boolean14 = chessBoard2.placePiece((a1.ChessPiece) knight11, "a1");
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard2, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) bishop16, "hi!");
        java.lang.String str19 = chessBoard0.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.lang.String str22 = chessBoard0.toString();
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str22.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test279");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        try {
            java.lang.String str15 = rook14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test280");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Queen queen23 = new a1.Queen(chessBoard0, color22);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test281");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard0, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard19, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard19, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard19, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Queen queen29 = new a1.Queen(chessBoard19, color28);
        java.lang.Class<?> wildcardClass30 = queen29.getClass();
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) queen29, "a1");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test282");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Knight knight6 = new a1.Knight(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        try {
            java.lang.String str11 = bishop10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test283");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        try {
            a1.ChessPiece chessPiece26 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test284");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test285");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessPiece.Color color38 = null;
        a1.Pawn pawn39 = new a1.Pawn(chessBoard0, color38);
        try {
            java.lang.String str40 = pawn39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test286");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        java.lang.String str10 = chessBoard8.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard8, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard15, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Pawn pawn19 = new a1.Pawn(chessBoard15, color18);
        boolean boolean21 = chessBoard8.placePiece((a1.ChessPiece) pawn19, "a1");
        chessBoard8.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard8, color23);
        java.util.ArrayList<java.lang.String> strList25 = bishop24.legalMoves();
        boolean boolean27 = chessBoard0.placePiece((a1.ChessPiece) bishop24, "hi!");
        java.lang.String str28 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str28.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test287");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = rook15.legalMoves();
        try {
            java.lang.String str17 = rook15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test288");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Rook rook12 = new a1.Rook(chessBoard0, color11);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test289");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        try {
            java.lang.String str17 = rook16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test290");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard0, color7);
        try {
            java.lang.String str9 = rook8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test291");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook3.legalMoves();
        a1.ChessPiece.Color color6 = rook3.getColor();
        java.util.ArrayList<java.lang.String> strList7 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        try {
            java.lang.String str9 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(color6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test292");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        a1.ChessPiece.Color color13 = pawn12.getColor();
        try {
            java.lang.String str14 = pawn12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNull(color13);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test293");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test294");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.King king10 = new a1.King(chessBoard0, color9);
        java.lang.String str11 = king10.getPosition();
        java.lang.String str12 = king10.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test295");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard21, color31);
        boolean boolean34 = chessBoard16.placePiece((a1.ChessPiece) pawn32, "a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "hi!");
        try {
            java.lang.String str39 = rook36.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test296");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        chessBoard0.initialize();
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece8 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test297");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard23, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Pawn pawn29 = new a1.Pawn(chessBoard23, color28);
        java.util.ArrayList<java.lang.String> strList30 = pawn29.legalMoves();
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) pawn29, "");
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test298");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        boolean boolean24 = chessBoard17.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessPiece chessPiece26 = chessBoard17.getPiece("a1");
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard17, color27);
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) bishop28, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard0, color32);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chessPiece26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test299");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        try {
            knight35.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test300");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        java.lang.Class<?> wildcardClass13 = knight10.getClass();
        java.lang.String str14 = knight10.getPosition();
        a1.ChessPiece.Color color15 = knight10.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
        org.junit.Assert.assertNull(color15);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test301");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        try {
            java.lang.String str23 = bishop22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test302");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece.Color color17 = queen16.getColor();
        try {
            queen16.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNull(color17);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test303");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard0, color25);
        try {
            java.lang.String str27 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test304");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        java.lang.String str7 = chessBoard5.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard5, color8);
        java.lang.String str10 = chessBoard5.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard5, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard5, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) bishop16, "");
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        java.lang.String str21 = bishop20.getPosition();
        java.util.ArrayList<java.lang.String> strList22 = bishop20.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "a1" + "'", str21.equals("a1"));
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test305");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        java.lang.String str18 = queen15.getPosition();
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "a1" + "'", str18.equals("a1"));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test306");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = queen16.legalMoves();
        try {
            java.lang.String str18 = queen16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test307");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard16, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard16, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Pawn pawn23 = new a1.Pawn(chessBoard16, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard24, color27);
        boolean boolean30 = chessBoard16.placePiece((a1.ChessPiece) pawn28, "a1");
        a1.ChessPiece.Color color31 = null;
        a1.Queen queen32 = new a1.Queen(chessBoard16, color31);
        boolean boolean34 = chessBoard0.placePiece((a1.ChessPiece) queen32, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        chessBoard35.initialize();
        java.lang.String str37 = chessBoard35.toString();
        a1.ChessPiece.Color color38 = null;
        a1.Knight knight39 = new a1.Knight(chessBoard35, color38);
        java.lang.String str40 = chessBoard35.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard35, color41);
        java.lang.Class<?> wildcardClass43 = bishop42.getClass();
        java.util.ArrayList<java.lang.String> strList44 = bishop42.legalMoves();
        boolean boolean46 = chessBoard0.placePiece((a1.ChessPiece) bishop42, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str37.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test308");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test309");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Knight knight6 = new a1.Knight(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        a1.ChessPiece.Color color10 = queen9.getColor();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(color10);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test310");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        chessBoard26.initialize();
        java.lang.String str28 = chessBoard26.toString();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard26, color29);
        a1.ChessPiece.Color color31 = null;
        a1.King king32 = new a1.King(chessBoard26, color31);
        a1.ChessPiece chessPiece34 = chessBoard26.getPiece("a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard26, color35);
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard26, color37);
        a1.ChessPiece.Color color39 = null;
        a1.Bishop bishop40 = new a1.Bishop(chessBoard26, color39);
        java.lang.String str41 = chessBoard26.toString();
        a1.ChessPiece.Color color42 = null;
        a1.Queen queen43 = new a1.Queen(chessBoard26, color42);
        boolean boolean45 = chessBoard0.placePiece((a1.ChessPiece) queen43, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str28.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece34);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str41.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test311");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.King king10 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = king10.legalMoves();
        try {
            king10.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test312");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList15 = king14.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = king14.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test313");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        a1.ChessPiece.Color color30 = king26.getColor();
        try {
            java.lang.String str31 = king26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(color30);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test314");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        try {
            java.lang.String str16 = queen15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test315");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        chessBoard0.initialize();
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        try {
            java.lang.String str17 = knight16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test316");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test317");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard8, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece chessPiece22 = chessBoard13.getPiece("a1");
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard13, color23);
        boolean boolean26 = chessBoard8.placePiece((a1.ChessPiece) pawn24, "a1");
        java.util.ArrayList<java.lang.String> strList27 = pawn24.legalMoves();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessPiece.Color color30 = null;
        a1.Knight knight31 = new a1.Knight(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Queen queen33 = new a1.Queen(chessBoard0, color32);
        try {
            java.lang.String str34 = queen33.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chessPiece22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test318");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        java.util.ArrayList<java.lang.String> strList20 = king19.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test319");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test320");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        chessBoard0.initialize();
        a1.ChessPiece.Color color37 = null;
        a1.King king38 = new a1.King(chessBoard0, color37);
        java.lang.Class<?> wildcardClass39 = chessBoard0.getClass();
        java.lang.String str40 = chessBoard0.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard0, color41);
        java.lang.String str43 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str43.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test321");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard28, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard28, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard28, color33);
        java.lang.String str35 = chessBoard28.toString();
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard28, color36);
        java.util.ArrayList<java.lang.String> strList38 = king37.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) king37, "hi!");
        try {
            java.lang.String str41 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str35.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test322");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard0, color17);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test323");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str16 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test324");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessPiece.Color color28 = null;
        a1.King king29 = new a1.King(chessBoard0, color28);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test325");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        java.lang.String str19 = pawn16.getPosition();
        java.util.ArrayList<java.lang.String> strList20 = pawn16.legalMoves();
        java.util.ArrayList<java.lang.String> strList21 = pawn16.legalMoves();
        java.lang.Class<?> wildcardClass22 = strList21.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "a1" + "'", str19.equals("a1"));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test326");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        chessBoard0.initialize();
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        try {
            java.lang.String str15 = queen14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test327");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            bishop14.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test328");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.String str4 = chessBoard0.toString();
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        chessBoard13.initialize();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard13, color15);
        java.util.ArrayList<java.lang.String> strList17 = rook16.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = rook16.legalMoves();
        java.util.ArrayList<java.lang.String> strList19 = rook16.legalMoves();
        boolean boolean21 = chessBoard5.placePiece((a1.ChessPiece) rook16, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color22 = null;
        a1.Knight knight23 = new a1.Knight(chessBoard5, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Bishop bishop25 = new a1.Bishop(chessBoard5, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard5, color26);
        a1.ChessPiece.Color color28 = null;
        a1.King king29 = new a1.King(chessBoard5, color28);
        boolean boolean31 = chessBoard0.placePiece((a1.ChessPiece) king29, "a1");
        try {
            java.lang.String str32 = king29.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str4.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test329");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        java.lang.Class<?> wildcardClass16 = chessBoard0.getClass();
        try {
            chessBoard0.move("a1", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test330");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard26, color27);
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        a1.ChessPiece.Color color30 = null;
        a1.Pawn pawn31 = new a1.Pawn(chessBoard29, color30);
        boolean boolean33 = chessBoard26.placePiece((a1.ChessPiece) pawn31, "");
        a1.ChessPiece chessPiece35 = chessBoard26.getPiece("a1");
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard26, color36);
        a1.ChessPiece.Color color38 = null;
        a1.Rook rook39 = new a1.Rook(chessBoard26, color38);
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook39, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color42 = null;
        a1.King king43 = new a1.King(chessBoard0, color42);
        try {
            java.lang.String str44 = king43.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(chessPiece35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test331");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        java.lang.String str11 = queen10.getPosition();
        try {
            java.lang.String str12 = queen10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test332");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        java.lang.String str20 = rook19.getPosition();
        try {
            java.lang.String str21 = rook19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test333");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.String str8 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str8.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test334");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard0, color23);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test335");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessPiece chessPiece25 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard16, color26);
        java.lang.String str28 = chessBoard16.toString();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard16, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard16, color31);
        a1.ChessPiece chessPiece34 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard0, color39);
        java.util.ArrayList<java.lang.String> strList41 = pawn40.legalMoves();
        java.util.ArrayList<java.lang.String> strList42 = pawn40.legalMoves();
        try {
            java.lang.String str43 = pawn40.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chessPiece25);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str28.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(chessPiece34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test336");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = bishop27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = bishop27.legalMoves();
        java.lang.Class<?> wildcardClass30 = strList29.getClass();
        java.lang.Class<?> wildcardClass31 = strList29.getClass();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test337");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard5, color7);
        java.util.ArrayList<java.lang.String> strList9 = rook8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook8.legalMoves();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) rook8, "");
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test338");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test339");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        boolean boolean24 = chessBoard17.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessPiece chessPiece26 = chessBoard17.getPiece("a1");
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard17, color27);
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) bishop28, "a1");
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard0, color31);
        try {
            java.lang.String str33 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chessPiece26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test340");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test341");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test342");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        try {
            java.lang.String str21 = pawn20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test343");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList15 = king14.legalMoves();
        try {
            java.lang.String str16 = king14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test344");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessPiece chessPiece25 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard16, color26);
        java.lang.String str28 = chessBoard16.toString();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard16, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Rook rook32 = new a1.Rook(chessBoard16, color31);
        a1.ChessPiece chessPiece34 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color39 = null;
        a1.Knight knight40 = new a1.Knight(chessBoard0, color39);
        java.util.ArrayList<java.lang.String> strList41 = knight40.legalMoves();
        try {
            knight40.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chessPiece25);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str28.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(chessPiece34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList41);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test345");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = queen20.getClass();
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test346");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        chessBoard0.initialize();
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = queen16.legalMoves();
        try {
            java.lang.String str18 = queen16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test347");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        java.lang.String str20 = king19.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test348");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece chessPiece16 = null;
        boolean boolean18 = chessBoard0.placePiece(chessPiece16, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str19 = chessBoard0.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Knight knight21 = new a1.Knight(chessBoard0, color20);
        try {
            java.lang.String str22 = knight21.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test349");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        chessBoard0.initialize();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        try {
            bishop20.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test350");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        chessBoard0.initialize();
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        chessBoard15.initialize();
        java.lang.String str17 = chessBoard15.toString();
        a1.ChessPiece.Color color18 = null;
        a1.Knight knight19 = new a1.Knight(chessBoard15, color18);
        chessBoard15.initialize();
        java.lang.Class<?> wildcardClass21 = chessBoard15.getClass();
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard22, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard25, color26);
        boolean boolean29 = chessBoard22.placePiece((a1.ChessPiece) pawn27, "");
        a1.ChessPiece chessPiece31 = chessBoard22.getPiece("a1");
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard22, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Bishop bishop35 = new a1.Bishop(chessBoard22, color34);
        java.util.ArrayList<java.lang.String> strList36 = bishop35.legalMoves();
        boolean boolean38 = chessBoard15.placePiece((a1.ChessPiece) bishop35, "a1");
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) bishop35, "hi!");
        try {
            java.lang.String str41 = bishop35.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(chessPiece31);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test351");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        try {
            java.lang.String str11 = queen10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test352");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        a1.ChessPiece.Color color36 = null;
        a1.Bishop bishop37 = new a1.Bishop(chessBoard0, color36);
        a1.ChessPiece.Color color38 = null;
        a1.Queen queen39 = new a1.Queen(chessBoard0, color38);
        try {
            java.lang.String str40 = queen39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test353");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        try {
            java.lang.String str12 = king11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test354");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str17 = chessBoard0.toString();
        a1.ChessPiece.Color color18 = null;
        a1.Pawn pawn19 = new a1.Pawn(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.King king21 = new a1.King(chessBoard0, color20);
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test355");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        a1.ChessPiece.Color color36 = null;
        a1.Bishop bishop37 = new a1.Bishop(chessBoard0, color36);
        a1.ChessPiece.Color color38 = bishop37.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(color38);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test356");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece chessPiece16 = null;
        boolean boolean18 = chessBoard0.placePiece(chessPiece16, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        pawn20.setPosition("a1");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test357");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.King king2 = new a1.King(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            java.lang.String str7 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test358");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = queen6.legalMoves();
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test359");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook6.legalMoves();
        try {
            java.lang.String str10 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test360");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        chessBoard0.initialize();
        a1.ChessPiece chessPiece16 = chessBoard0.getPiece("a1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chessPiece16);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test361");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        java.lang.String str19 = chessBoard0.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard0, color20);
        try {
            java.lang.String str22 = queen21.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test362");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        chessBoard0.initialize();
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test363");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList15 = pawn14.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = pawn14.legalMoves();
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test364");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        try {
            chessBoard0.move("a1", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test365");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        java.lang.Class<?> wildcardClass17 = chessBoard0.getClass();
        try {
            chessBoard0.move("a1", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test366");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook6.legalMoves();
        java.lang.String str11 = rook6.getPosition();
        java.lang.String str12 = rook6.getPosition();
        try {
            java.lang.String str13 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "a1" + "'", str12.equals("a1"));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test367");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard0, color25);
        chessBoard0.initialize();
        a1.ChessPiece.Color color28 = null;
        a1.Bishop bishop29 = new a1.Bishop(chessBoard0, color28);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test368");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test369");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard0, color36);
        a1.ChessPiece.Color color38 = null;
        a1.Pawn pawn39 = new a1.Pawn(chessBoard0, color38);
        try {
            java.lang.String str40 = pawn39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test370");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.King king20 = new a1.King(chessBoard0, color19);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test371");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str23 = chessBoard0.toString();
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str23.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test372");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Bishop bishop54 = new a1.Bishop(chessBoard0, color53);
        java.util.ArrayList<java.lang.String> strList55 = bishop54.legalMoves();
        try {
            bishop54.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test373");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        java.util.ArrayList<java.lang.String> strList24 = bishop20.legalMoves();
        java.util.ArrayList<java.lang.String> strList25 = bishop20.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test374");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard0, color25);
        try {
            java.lang.String str27 = pawn26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test375");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard0, color10);
        try {
            java.lang.String str12 = rook11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test376");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = bishop13.legalMoves();
        a1.ChessPiece.Color color15 = bishop13.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(color15);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test377");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Knight knight21 = new a1.Knight(chessBoard0, color20);
        java.util.ArrayList<java.lang.String> strList22 = knight21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = knight21.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test378");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = bishop6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = bishop6.legalMoves();
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test379");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        java.lang.String str22 = bishop20.getPosition();
        java.util.ArrayList<java.lang.String> strList23 = bishop20.legalMoves();
        try {
            java.lang.String str24 = bishop20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "a1" + "'", str22.equals("a1"));
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test380");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        try {
            java.lang.String str8 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test381");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = king18.legalMoves();
        try {
            java.lang.String str20 = king18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test382");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        chessBoard0.initialize();
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard0, color33);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test383");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        try {
            java.lang.String str8 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test384");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard0, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard0, color27);
        try {
            rook28.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test385");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Pawn pawn19 = new a1.Pawn(chessBoard17, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard17, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard17, color22);
        java.util.ArrayList<java.lang.String> strList24 = rook23.legalMoves();
        java.lang.String str25 = rook23.getPosition();
        java.lang.Class<?> wildcardClass26 = rook23.getClass();
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) rook23, "a1");
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard0, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard31, color32);
        a1.ChessBoard chessBoard34 = new a1.ChessBoard();
        a1.ChessPiece.Color color35 = null;
        a1.Pawn pawn36 = new a1.Pawn(chessBoard34, color35);
        boolean boolean38 = chessBoard31.placePiece((a1.ChessPiece) pawn36, "");
        a1.ChessBoard chessBoard39 = null;
        a1.ChessPiece.Color color40 = null;
        a1.Knight knight41 = new a1.Knight(chessBoard39, color40);
        boolean boolean43 = chessBoard31.placePiece((a1.ChessPiece) knight41, "hi!");
        chessBoard31.initialize();
        a1.ChessPiece.Color color45 = null;
        a1.Rook rook46 = new a1.Rook(chessBoard31, color45);
        chessBoard31.initialize();
        a1.ChessPiece.Color color48 = null;
        a1.Pawn pawn49 = new a1.Pawn(chessBoard31, color48);
        boolean boolean51 = chessBoard0.placePiece((a1.ChessPiece) pawn49, "");
        java.lang.Class<?> wildcardClass52 = pawn49.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "a1" + "'", str25.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test386");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = knight9.legalMoves();
        try {
            java.lang.String str11 = knight9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test387");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        try {
            a1.ChessPiece chessPiece39 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test388");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.lang.String str16 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test389");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        java.lang.String str17 = chessBoard0.toString();
        java.lang.Class<?> wildcardClass18 = chessBoard0.getClass();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test390");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = bishop17.legalMoves();
        a1.ChessPiece.Color color19 = bishop17.getColor();
        java.util.ArrayList<java.lang.String> strList20 = bishop17.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(color19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test391");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard8, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard8, color17);
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) king18, "a1");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test392");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList12 = king11.legalMoves();
        try {
            java.lang.String str13 = king11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test393");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard21, color31);
        boolean boolean34 = chessBoard16.placePiece((a1.ChessPiece) pawn32, "a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "hi!");
        a1.ChessPiece.Color color39 = null;
        a1.Queen queen40 = new a1.Queen(chessBoard0, color39);
        a1.ChessPiece.Color color41 = null;
        a1.Queen queen42 = new a1.Queen(chessBoard0, color41);
        try {
            queen42.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test394");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        java.lang.Class<?> wildcardClass26 = chessBoard0.getClass();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard0, color27);
        try {
            java.lang.String str29 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test395");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Knight knight17 = new a1.Knight(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test396");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        try {
            java.lang.String str18 = queen17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test397");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        chessBoard0.initialize();
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = king18.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test398");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        chessBoard25.initialize();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard25, color27);
        java.util.ArrayList<java.lang.String> strList29 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook28.legalMoves();
        boolean boolean35 = chessBoard0.placePiece((a1.ChessPiece) rook28, "");
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = null;
        a1.Bishop bishop38 = new a1.Bishop(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        boolean boolean43 = chessBoard36.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessPiece chessPiece45 = chessBoard36.getPiece("a1");
        a1.ChessPiece.Color color46 = null;
        a1.Bishop bishop47 = new a1.Bishop(chessBoard36, color46);
        a1.ChessBoard chessBoard48 = new a1.ChessBoard();
        a1.ChessPiece.Color color49 = null;
        a1.Pawn pawn50 = new a1.Pawn(chessBoard48, color49);
        a1.ChessPiece.Color color51 = null;
        a1.Queen queen52 = new a1.Queen(chessBoard48, color51);
        a1.ChessPiece.Color color53 = null;
        a1.Queen queen54 = new a1.Queen(chessBoard48, color53);
        a1.ChessPiece.Color color55 = null;
        a1.Queen queen56 = new a1.Queen(chessBoard48, color55);
        boolean boolean58 = chessBoard36.placePiece((a1.ChessPiece) queen56, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass59 = chessBoard36.getClass();
        a1.ChessPiece.Color color60 = null;
        a1.Queen queen61 = new a1.Queen(chessBoard36, color60);
        boolean boolean63 = chessBoard0.placePiece((a1.ChessPiece) queen61, "");
        java.lang.String str64 = queen61.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(chessPiece45);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "a1" + "'", str64.equals("a1"));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test399");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Knight knight17 = new a1.Knight(chessBoard0, color16);
        try {
            java.lang.String str18 = knight17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test400");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = chessBoard0.getClass();
        try {
            a1.ChessPiece chessPiece11 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test401");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        java.util.ArrayList<java.lang.String> strList19 = pawn16.legalMoves();
        java.util.ArrayList<java.lang.String> strList20 = pawn16.legalMoves();
        try {
            java.lang.String str21 = pawn16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test402");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        a1.ChessPiece.Color color5 = knight4.getColor();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass7 = strList6.getClass();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(color5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test403");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece chessPiece17 = null;
        boolean boolean19 = chessBoard0.placePiece(chessPiece17, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard20, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        a1.ChessPiece.Color color24 = null;
        a1.Pawn pawn25 = new a1.Pawn(chessBoard23, color24);
        boolean boolean27 = chessBoard20.placePiece((a1.ChessPiece) pawn25, "");
        a1.ChessPiece chessPiece29 = chessBoard20.getPiece("a1");
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard20, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Queen queen33 = new a1.Queen(chessBoard20, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Bishop bishop35 = new a1.Bishop(chessBoard20, color34);
        a1.ChessPiece.Color color36 = null;
        a1.Queen queen37 = new a1.Queen(chessBoard20, color36);
        a1.ChessPiece.Color color38 = null;
        a1.King king39 = new a1.King(chessBoard20, color38);
        a1.ChessPiece.Color color40 = king39.getColor();
        boolean boolean42 = chessBoard0.placePiece((a1.ChessPiece) king39, "a1");
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(chessPiece29);
        org.junit.Assert.assertNull(color40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test404");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard0, color21);
        java.lang.Class<?> wildcardClass23 = knight22.getClass();
        try {
            java.lang.String str24 = knight22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test405");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Queen queen35 = new a1.Queen(chessBoard0, color34);
        java.util.ArrayList<java.lang.String> strList36 = queen35.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test406");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        java.lang.Class<?> wildcardClass16 = chessBoard0.getClass();
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test407");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard8, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece chessPiece22 = chessBoard13.getPiece("a1");
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard13, color23);
        boolean boolean26 = chessBoard8.placePiece((a1.ChessPiece) pawn24, "a1");
        java.util.ArrayList<java.lang.String> strList27 = pawn24.legalMoves();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard0, color30);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chessPiece22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test408");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard8, color11);
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) pawn12, "a1");
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        try {
            java.lang.String str17 = rook16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test409");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = knight10.legalMoves();
        java.util.ArrayList<java.lang.String> strList12 = knight10.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test410");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = pawn27.legalMoves();
        try {
            java.lang.String str29 = pawn27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test411");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard15, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard18, color19);
        boolean boolean22 = chessBoard15.placePiece((a1.ChessPiece) pawn20, "");
        chessBoard15.initialize();
        java.lang.String str24 = chessBoard15.toString();
        a1.ChessPiece.Color color25 = null;
        a1.Knight knight26 = new a1.Knight(chessBoard15, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) knight26, "hi!");
        a1.ChessPiece.Color color29 = null;
        a1.Knight knight30 = new a1.Knight(chessBoard0, color29);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str24.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test412");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = queen17.getColor();
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(color18);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test413");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Knight knight6 = new a1.Knight(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard8, color9);
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard11, color12);
        boolean boolean15 = chessBoard8.placePiece((a1.ChessPiece) pawn13, "");
        chessBoard8.initialize();
        java.lang.String str17 = chessBoard8.toString();
        java.lang.String str18 = chessBoard8.toString();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessPiece chessPiece28 = chessBoard19.getPiece("a1");
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard19, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Queen queen32 = new a1.Queen(chessBoard19, color31);
        a1.ChessBoard chessBoard33 = null;
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard33, color34);
        java.lang.String str36 = knight35.getPosition();
        a1.ChessPiece.Color color37 = knight35.getColor();
        boolean boolean39 = chessBoard19.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessPiece.Color color40 = null;
        a1.King king41 = new a1.King(chessBoard19, color40);
        a1.ChessPiece.Color color42 = null;
        a1.Knight knight43 = new a1.Knight(chessBoard19, color42);
        boolean boolean45 = chessBoard8.placePiece((a1.ChessPiece) knight43, "a1");
        a1.ChessBoard chessBoard46 = new a1.ChessBoard();
        chessBoard46.initialize();
        java.lang.String str48 = chessBoard46.toString();
        a1.ChessPiece.Color color49 = null;
        a1.Bishop bishop50 = new a1.Bishop(chessBoard46, color49);
        a1.ChessPiece.Color color51 = null;
        a1.King king52 = new a1.King(chessBoard46, color51);
        a1.ChessPiece chessPiece54 = chessBoard46.getPiece("a1");
        a1.ChessPiece.Color color55 = null;
        a1.Queen queen56 = new a1.Queen(chessBoard46, color55);
        a1.ChessPiece.Color color57 = queen56.getColor();
        java.util.ArrayList<java.lang.String> strList58 = queen56.legalMoves();
        boolean boolean60 = chessBoard8.placePiece((a1.ChessPiece) queen56, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard61 = new a1.ChessBoard();
        a1.ChessPiece.Color color62 = null;
        a1.Bishop bishop63 = new a1.Bishop(chessBoard61, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard64, color65);
        boolean boolean68 = chessBoard61.placePiece((a1.ChessPiece) pawn66, "");
        a1.ChessPiece.Color color69 = pawn66.getColor();
        java.lang.String str70 = pawn66.getPosition();
        java.util.ArrayList<java.lang.String> strList71 = pawn66.legalMoves();
        boolean boolean73 = chessBoard8.placePiece((a1.ChessPiece) pawn66, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color74 = pawn66.getColor();
        java.util.ArrayList<java.lang.String> strList75 = pawn66.legalMoves();
        boolean boolean77 = chessBoard0.placePiece((a1.ChessPiece) pawn66, "a1");
        a1.ChessPiece.Color color78 = null;
        a1.Rook rook79 = new a1.Rook(chessBoard0, color78);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(chessPiece28);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "a1" + "'", str36.equals("a1"));
        org.junit.Assert.assertNull(color37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str48.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece54);
        org.junit.Assert.assertNull(color57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(color69);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "a1" + "'", str70.equals("a1"));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(color74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test414");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test415");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        java.lang.String str20 = chessBoard18.toString();
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard18, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard18, color23);
        chessBoard18.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.King king27 = new a1.King(chessBoard18, color26);
        java.lang.String str28 = chessBoard18.toString();
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        chessBoard29.initialize();
        java.lang.String str31 = chessBoard29.toString();
        a1.ChessPiece.Color color32 = null;
        a1.Knight knight33 = new a1.Knight(chessBoard29, color32);
        chessBoard29.initialize();
        java.lang.Class<?> wildcardClass35 = chessBoard29.getClass();
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard29, color36);
        a1.ChessPiece.Color color38 = pawn37.getColor();
        java.util.ArrayList<java.lang.String> strList39 = pawn37.legalMoves();
        boolean boolean41 = chessBoard18.placePiece((a1.ChessPiece) pawn37, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        boolean boolean43 = chessBoard0.placePiece((a1.ChessPiece) pawn37, "a1");
        java.util.ArrayList<java.lang.String> strList44 = pawn37.legalMoves();
        try {
            java.lang.String str45 = pawn37.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str20.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str28.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str31.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(color38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test416");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        try {
            chessBoard0.move("a1", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test417");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        bishop4.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList8 = bishop4.legalMoves();
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test418");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        java.lang.Class<?> wildcardClass19 = chessBoard0.getClass();
        a1.ChessPiece.Color color20 = null;
        a1.King king21 = new a1.King(chessBoard0, color20);
        try {
            java.lang.String str22 = king21.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test419");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        try {
            java.lang.String str20 = king19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test420");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        try {
            java.lang.String str23 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test421");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        chessBoard0.initialize();
        java.lang.String str14 = chessBoard0.toString();
        java.lang.String str15 = chessBoard0.toString();
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessPiece chessPiece25 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard16, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Queen queen29 = new a1.Queen(chessBoard16, color28);
        a1.ChessBoard chessBoard30 = null;
        a1.ChessPiece.Color color31 = null;
        a1.Knight knight32 = new a1.Knight(chessBoard30, color31);
        java.lang.String str33 = knight32.getPosition();
        a1.ChessPiece.Color color34 = knight32.getColor();
        boolean boolean36 = chessBoard16.placePiece((a1.ChessPiece) knight32, "a1");
        a1.ChessPiece.Color color37 = null;
        a1.Bishop bishop38 = new a1.Bishop(chessBoard16, color37);
        a1.ChessPiece.Color color39 = null;
        a1.Pawn pawn40 = new a1.Pawn(chessBoard16, color39);
        a1.ChessPiece.Color color41 = null;
        a1.King king42 = new a1.King(chessBoard16, color41);
        java.lang.String str43 = king42.getPosition();
        java.util.ArrayList<java.lang.String> strList44 = king42.legalMoves();
        java.util.ArrayList<java.lang.String> strList45 = king42.legalMoves();
        boolean boolean47 = chessBoard0.placePiece((a1.ChessPiece) king42, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str15.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chessPiece25);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "a1" + "'", str33.equals("a1"));
        org.junit.Assert.assertNull(color34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "a1" + "'", str43.equals("a1"));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test422");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        java.util.ArrayList<java.lang.String> strList38 = pawn35.legalMoves();
        java.util.ArrayList<java.lang.String> strList39 = pawn35.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test423");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList8 = rook7.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook7.legalMoves();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test424");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        java.lang.String str10 = chessBoard8.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Knight knight12 = new a1.Knight(chessBoard8, color11);
        java.lang.String str13 = chessBoard8.toString();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard8, color14);
        java.lang.Class<?> wildcardClass16 = bishop15.getClass();
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) bishop15, "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str13.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test425");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = pawn13.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test426");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Knight knight33 = new a1.Knight(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.King king35 = new a1.King(chessBoard0, color34);
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard0, color36);
        try {
            a1.ChessPiece chessPiece39 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test427");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test428");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        try {
            java.lang.String str19 = king18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test429");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = knight16.getColor();
        try {
            java.lang.String str22 = knight16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(color21);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test430");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        java.lang.Class<?> wildcardClass12 = chessBoard0.getClass();
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard0, color15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test431");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        chessBoard0.initialize();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test432");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        java.lang.String str17 = chessBoard0.toString();
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        java.lang.String str20 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str20.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test433");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard28, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard28, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard28, color33);
        java.lang.String str35 = chessBoard28.toString();
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard28, color36);
        java.util.ArrayList<java.lang.String> strList38 = king37.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) king37, "hi!");
        a1.ChessPiece.Color color41 = null;
        a1.King king42 = new a1.King(chessBoard0, color41);
        java.util.ArrayList<java.lang.String> strList43 = king42.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str35.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test434");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard14, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard14, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard14, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Pawn pawn23 = new a1.Pawn(chessBoard14, color22);
        boolean boolean25 = chessBoard0.placePiece((a1.ChessPiece) pawn23, "a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        try {
            java.lang.String str28 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test435");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str17 = chessBoard0.toString();
        try {
            a1.ChessPiece chessPiece19 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test436");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        rook6.setPosition("a1");
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test437");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test438");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard13, color21);
        boolean boolean24 = chessBoard0.placePiece((a1.ChessPiece) knight22, "a1");
        chessBoard0.initialize();
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test439");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.String str4 = chessBoard0.toString();
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        try {
            java.lang.String str7 = bishop6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str4.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test440");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Knight knight19 = new a1.Knight(chessBoard0, color18);
        java.util.ArrayList<java.lang.String> strList20 = knight19.legalMoves();
        try {
            java.lang.String str21 = knight19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test441");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        try {
            java.lang.String str10 = knight9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test442");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = king6.legalMoves();
        java.lang.Class<?> wildcardClass11 = king6.getClass();
        java.util.ArrayList<java.lang.String> strList12 = king6.legalMoves();
        a1.ChessPiece.Color color13 = king6.getColor();
        try {
            java.lang.String str14 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(color13);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test443");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard26, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Queen queen32 = new a1.Queen(chessBoard26, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Bishop bishop34 = new a1.Bishop(chessBoard26, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        chessBoard35.initialize();
        java.lang.String str37 = chessBoard35.toString();
        a1.ChessPiece.Color color38 = null;
        a1.Knight knight39 = new a1.Knight(chessBoard35, color38);
        java.lang.String str40 = chessBoard35.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Queen queen42 = new a1.Queen(chessBoard35, color41);
        java.lang.Class<?> wildcardClass43 = chessBoard35.getClass();
        a1.ChessPiece.Color color44 = null;
        a1.Queen queen45 = new a1.Queen(chessBoard35, color44);
        java.util.ArrayList<java.lang.String> strList46 = queen45.legalMoves();
        boolean boolean48 = chessBoard26.placePiece((a1.ChessPiece) queen45, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        boolean boolean50 = chessBoard0.placePiece((a1.ChessPiece) queen45, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            a1.ChessPiece chessPiece52 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str37.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test444");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        java.lang.Class<?> wildcardClass26 = chessBoard0.getClass();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard0, color27);
        a1.ChessPiece.Color color29 = null;
        a1.Knight knight30 = new a1.Knight(chessBoard0, color29);
        java.util.ArrayList<java.lang.String> strList31 = knight30.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test445");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test446");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        java.lang.Class<?> wildcardClass16 = rook15.getClass();
        java.util.ArrayList<java.lang.String> strList17 = rook15.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = rook15.legalMoves();
        try {
            java.lang.String str19 = rook15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test447");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = queen12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = queen12.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test448");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        a1.ChessPiece.Color color19 = bishop18.getColor();
        try {
            bishop18.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(color19);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test449");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = queen10.getColor();
        java.util.ArrayList<java.lang.String> strList12 = queen10.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNull(color11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test450");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = king9.legalMoves();
        try {
            java.lang.String str11 = king9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test451");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Knight knight7 = new a1.Knight(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard0, color8);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test452");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        try {
            chessBoard0.move("hi!", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test453");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test454");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        chessBoard0.initialize();
        a1.ChessPiece.Color color37 = null;
        a1.King king38 = new a1.King(chessBoard0, color37);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test455");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook30.legalMoves();
        boolean boolean35 = chessBoard19.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList36 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = rook30.legalMoves();
        boolean boolean39 = chessBoard9.placePiece((a1.ChessPiece) rook30, "");
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color42 = null;
        a1.Knight knight43 = new a1.Knight(chessBoard0, color42);
        try {
            knight43.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test456");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        chessBoard0.initialize();
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessPiece chessPiece19 = chessBoard10.getPiece("a1");
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard10, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard10, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard10, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Queen queen27 = new a1.Queen(chessBoard10, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) queen27, "a1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(chessPiece19);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test457");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        a1.ChessBoard chessBoard28 = new a1.ChessBoard();
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard28, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Bishop bishop32 = new a1.Bishop(chessBoard28, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Rook rook34 = new a1.Rook(chessBoard28, color33);
        java.lang.String str35 = chessBoard28.toString();
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard28, color36);
        java.util.ArrayList<java.lang.String> strList38 = king37.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) king37, "hi!");
        a1.ChessPiece.Color color41 = null;
        a1.King king42 = new a1.King(chessBoard0, color41);
        try {
            java.lang.String str43 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str35.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test458");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList12 = knight11.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test459");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.lang.Class<?> wildcardClass7 = pawn6.getClass();
        a1.ChessPiece.Color color8 = pawn6.getColor();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test460");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Queen queen35 = new a1.Queen(chessBoard0, color34);
        try {
            java.lang.String str36 = queen35.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test461");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        try {
            chessBoard0.move("hi!", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test462");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        try {
            java.lang.String str11 = rook10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test463");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        chessBoard25.initialize();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard25, color27);
        java.util.ArrayList<java.lang.String> strList29 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook28.legalMoves();
        boolean boolean35 = chessBoard0.placePiece((a1.ChessPiece) rook28, "");
        java.util.ArrayList<java.lang.String> strList36 = rook28.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test464");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        try {
            java.lang.String str17 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test465");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Pawn pawn19 = new a1.Pawn(chessBoard17, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard17, color20);
        a1.ChessPiece.Color color22 = null;
        a1.Rook rook23 = new a1.Rook(chessBoard17, color22);
        java.util.ArrayList<java.lang.String> strList24 = rook23.legalMoves();
        java.lang.String str25 = rook23.getPosition();
        java.lang.Class<?> wildcardClass26 = rook23.getClass();
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) rook23, "a1");
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard0, color29);
        a1.ChessBoard chessBoard31 = new a1.ChessBoard();
        chessBoard31.initialize();
        java.lang.String str33 = chessBoard31.toString();
        a1.ChessPiece.Color color34 = null;
        a1.Bishop bishop35 = new a1.Bishop(chessBoard31, color34);
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard31, color36);
        a1.ChessPiece chessPiece39 = chessBoard31.getPiece("a1");
        a1.ChessPiece.Color color40 = null;
        a1.Rook rook41 = new a1.Rook(chessBoard31, color40);
        a1.ChessPiece.Color color42 = null;
        a1.Pawn pawn43 = new a1.Pawn(chessBoard31, color42);
        a1.ChessPiece.Color color44 = pawn43.getColor();
        boolean boolean46 = chessBoard0.placePiece((a1.ChessPiece) pawn43, "a1");
        a1.ChessPiece.Color color47 = pawn43.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "a1" + "'", str25.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str33.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece39);
        org.junit.Assert.assertNull(color44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(color47);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test466");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        java.lang.String str17 = chessBoard0.toString();
        java.lang.String str18 = chessBoard0.toString();
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        chessBoard19.initialize();
        java.lang.String str21 = chessBoard19.toString();
        a1.ChessPiece.Color color22 = null;
        a1.Knight knight23 = new a1.Knight(chessBoard19, color22);
        java.lang.String str24 = chessBoard19.toString();
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard19, color25);
        java.lang.Class<?> wildcardClass27 = chessBoard19.getClass();
        a1.ChessPiece.Color color28 = null;
        a1.Queen queen29 = new a1.Queen(chessBoard19, color28);
        a1.ChessPiece.Color color30 = null;
        a1.King king31 = new a1.King(chessBoard19, color30);
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard19, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard19, color34);
        java.util.ArrayList<java.lang.String> strList36 = pawn35.legalMoves();
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str17.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str21.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str24.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test467");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        chessBoard12.initialize();
        java.lang.String str14 = chessBoard12.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard12, color17);
        a1.ChessPiece chessPiece20 = chessBoard12.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Queen queen22 = new a1.Queen(chessBoard12, color21);
        a1.ChessPiece.Color color23 = queen22.getColor();
        java.util.ArrayList<java.lang.String> strList24 = queen22.legalMoves();
        boolean boolean26 = chessBoard0.placePiece((a1.ChessPiece) queen22, "hi!");
        try {
            java.lang.String str27 = queen22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece20);
        org.junit.Assert.assertNull(color23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test468");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Rook rook31 = new a1.Rook(chessBoard0, color30);
        a1.ChessBoard chessBoard32 = new a1.ChessBoard();
        a1.ChessPiece.Color color33 = null;
        a1.Bishop bishop34 = new a1.Bishop(chessBoard32, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        a1.ChessPiece.Color color36 = null;
        a1.Pawn pawn37 = new a1.Pawn(chessBoard35, color36);
        boolean boolean39 = chessBoard32.placePiece((a1.ChessPiece) pawn37, "");
        chessBoard32.initialize();
        a1.ChessPiece.Color color41 = null;
        a1.Pawn pawn42 = new a1.Pawn(chessBoard32, color41);
        java.util.ArrayList<java.lang.String> strList43 = pawn42.legalMoves();
        java.lang.Class<?> wildcardClass44 = pawn42.getClass();
        java.util.ArrayList<java.lang.String> strList45 = pawn42.legalMoves();
        java.util.ArrayList<java.lang.String> strList46 = pawn42.legalMoves();
        boolean boolean48 = chessBoard0.placePiece((a1.ChessPiece) pawn42, "a1");
        try {
            java.lang.String str49 = pawn42.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test469");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece11 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test470");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        java.lang.String str38 = pawn35.getPosition();
        java.util.ArrayList<java.lang.String> strList39 = pawn35.legalMoves();
        java.lang.String str40 = pawn35.getPosition();
        try {
            java.lang.String str41 = pawn35.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "a1" + "'", str38.equals("a1"));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "a1" + "'", str40.equals("a1"));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test471");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        java.lang.String str33 = chessBoard0.toString();
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard0, color34);
        a1.ChessBoard chessBoard36 = new a1.ChessBoard();
        a1.ChessPiece.Color color37 = null;
        a1.Bishop bishop38 = new a1.Bishop(chessBoard36, color37);
        a1.ChessBoard chessBoard39 = new a1.ChessBoard();
        a1.ChessPiece.Color color40 = null;
        a1.Pawn pawn41 = new a1.Pawn(chessBoard39, color40);
        boolean boolean43 = chessBoard36.placePiece((a1.ChessPiece) pawn41, "");
        a1.ChessBoard chessBoard44 = null;
        a1.ChessPiece.Color color45 = null;
        a1.Knight knight46 = new a1.Knight(chessBoard44, color45);
        boolean boolean48 = chessBoard36.placePiece((a1.ChessPiece) knight46, "hi!");
        chessBoard36.initialize();
        a1.ChessPiece.Color color50 = null;
        a1.Rook rook51 = new a1.Rook(chessBoard36, color50);
        chessBoard36.initialize();
        a1.ChessPiece.Color color53 = null;
        a1.Pawn pawn54 = new a1.Pawn(chessBoard36, color53);
        java.util.ArrayList<java.lang.String> strList55 = pawn54.legalMoves();
        java.util.ArrayList<java.lang.String> strList56 = pawn54.legalMoves();
        boolean boolean58 = chessBoard0.placePiece((a1.ChessPiece) pawn54, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str33.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test472");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard0, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Knight knight28 = new a1.Knight(chessBoard0, color27);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test473");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        a1.ChessPiece.Color color8 = king6.getColor();
        java.lang.String str9 = king6.getPosition();
        try {
            java.lang.String str10 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1" + "'", str9.equals("a1"));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test474");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = pawn12.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = pawn12.legalMoves();
        try {
            java.lang.String str15 = pawn12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test475");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.King king21 = new a1.King(chessBoard0, color20);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test476");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = knight16.getColor();
        java.util.ArrayList<java.lang.String> strList22 = knight16.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test477");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard0, color13);
        a1.ChessBoard chessBoard15 = new a1.ChessBoard();
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard15, color16);
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard15, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard15, color20);
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) pawn21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            pawn21.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test478");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard9, color12);
        boolean boolean15 = chessBoard0.placePiece((a1.ChessPiece) queen13, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        try {
            java.lang.String str18 = rook17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test479");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        queen13.setPosition("a1");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test480");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Queen queen54 = new a1.Queen(chessBoard0, color53);
        try {
            java.lang.String str55 = queen54.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test481");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard8, color11);
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) pawn12, "a1");
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        try {
            a1.ChessPiece chessPiece20 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test482");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        chessBoard0.initialize();
        a1.ChessPiece.Color color17 = null;
        a1.Rook rook18 = new a1.Rook(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = rook18.legalMoves();
        a1.ChessPiece.Color color20 = rook18.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(color20);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test483");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Knight knight54 = new a1.Knight(chessBoard0, color53);
        a1.ChessBoard chessBoard55 = new a1.ChessBoard();
        a1.ChessPiece.Color color56 = null;
        a1.Pawn pawn57 = new a1.Pawn(chessBoard55, color56);
        a1.ChessPiece.Color color58 = null;
        a1.Bishop bishop59 = new a1.Bishop(chessBoard55, color58);
        a1.ChessPiece.Color color60 = null;
        a1.Rook rook61 = new a1.Rook(chessBoard55, color60);
        a1.ChessPiece.Color color62 = null;
        a1.Queen queen63 = new a1.Queen(chessBoard55, color62);
        a1.ChessBoard chessBoard64 = new a1.ChessBoard();
        a1.ChessPiece.Color color65 = null;
        a1.Pawn pawn66 = new a1.Pawn(chessBoard64, color65);
        a1.ChessPiece.Color color67 = null;
        a1.Queen queen68 = new a1.Queen(chessBoard64, color67);
        boolean boolean70 = chessBoard55.placePiece((a1.ChessPiece) queen68, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color71 = null;
        a1.Rook rook72 = new a1.Rook(chessBoard55, color71);
        a1.ChessPiece.Color color73 = null;
        a1.Queen queen74 = new a1.Queen(chessBoard55, color73);
        boolean boolean76 = chessBoard0.placePiece((a1.ChessPiece) queen74, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color77 = null;
        a1.Pawn pawn78 = new a1.Pawn(chessBoard0, color77);
        a1.ChessPiece.Color color79 = null;
        a1.Queen queen80 = new a1.Queen(chessBoard0, color79);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test484");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard8, color11);
        boolean boolean14 = chessBoard0.placePiece((a1.ChessPiece) pawn12, "a1");
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = rook16.legalMoves();
        try {
            rook16.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test485");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        try {
            java.lang.String str8 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test486");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = king16.legalMoves();
        java.lang.String str18 = king16.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "a1" + "'", str18.equals("a1"));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test487");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Knight knight25 = new a1.Knight(chessBoard0, color24);
        try {
            java.lang.String str26 = knight25.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test488");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard53 = new a1.ChessBoard();
        a1.ChessPiece.Color color54 = null;
        a1.Bishop bishop55 = new a1.Bishop(chessBoard53, color54);
        a1.ChessBoard chessBoard56 = new a1.ChessBoard();
        a1.ChessPiece.Color color57 = null;
        a1.Pawn pawn58 = new a1.Pawn(chessBoard56, color57);
        boolean boolean60 = chessBoard53.placePiece((a1.ChessPiece) pawn58, "");
        a1.ChessPiece.Color color61 = pawn58.getColor();
        java.lang.String str62 = pawn58.getPosition();
        java.util.ArrayList<java.lang.String> strList63 = pawn58.legalMoves();
        boolean boolean65 = chessBoard0.placePiece((a1.ChessPiece) pawn58, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            a1.ChessPiece chessPiece67 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(color61);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "a1" + "'", str62.equals("a1"));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test489");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Bishop bishop29 = new a1.Bishop(chessBoard0, color28);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test490");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Rook rook17 = new a1.Rook(chessBoard0, color16);
        java.lang.Class<?> wildcardClass18 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test491");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = rook13.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test492");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        java.lang.String str18 = chessBoard16.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard16, color21);
        a1.ChessPiece chessPiece24 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard16, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        chessBoard29.initialize();
        java.lang.String str31 = chessBoard29.toString();
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard29, color32);
        java.util.ArrayList<java.lang.String> strList34 = bishop33.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop33, "hi!");
        a1.ChessPiece.Color color37 = null;
        a1.Pawn pawn38 = new a1.Pawn(chessBoard0, color37);
        try {
            pawn38.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str31.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test493");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = knight2.legalMoves();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test494");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.King king7 = new a1.King(chessBoard0, color6);
        java.lang.String str8 = king7.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1" + "'", str8.equals("a1"));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test495");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Knight knight20 = new a1.Knight(chessBoard18, color19);
        java.util.ArrayList<java.lang.String> strList21 = knight20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) knight20, "");
        java.util.ArrayList<java.lang.String> strList24 = knight20.legalMoves();
        try {
            java.lang.String str25 = knight20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test496");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList8 = bishop7.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test497");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList17 = rook11.legalMoves();
        a1.ChessPiece.Color color18 = rook11.getColor();
        java.util.ArrayList<java.lang.String> strList19 = rook11.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test498");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.King king23 = new a1.King(chessBoard0, color22);
        a1.ChessPiece.Color color24 = null;
        a1.Rook rook25 = new a1.Rook(chessBoard0, color24);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        a1.ChessPiece.Color color33 = rook30.getColor();
        java.util.ArrayList<java.lang.String> strList34 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList35 = rook30.legalMoves();
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) rook30, "a1");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNull(color33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test499");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        chessBoard0.initialize();
        try {
            chessBoard0.move("a1", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test500");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        try {
            java.lang.String str3 = pawn2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }
}

