package a1.tests;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.King king2 = new a1.King(chessBoard0, color1);
        try {
            java.util.ArrayList<java.lang.String> strList3 = king2.legalMoves();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.King king2 = new a1.King(chessBoard0, color1);
        try {
            java.lang.String str3 = king2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        try {
            chessBoard0.move("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        try {
            java.lang.String str8 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        try {
            a1.ChessPiece chessPiece4 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        try {
            chessBoard0.move("hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        try {
            java.lang.String str4 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        try {
            java.lang.String str3 = bishop2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        try {
            java.lang.String str4 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        try {
            java.lang.String str21 = knight16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        try {
            a1.ChessPiece chessPiece6 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            a1.ChessPiece chessPiece8 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        try {
            java.lang.String str23 = king22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        try {
            pawn5.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        try {
            chessBoard0.move("a1", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        try {
            java.lang.String str12 = bishop11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = pawn11.getColor();
        try {
            java.lang.String str13 = pawn11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color12);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        try {
            java.lang.String str7 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        try {
            java.lang.String str8 = queen7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        try {
            java.lang.String str8 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        try {
            java.lang.String str6 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        try {
            java.lang.String str5 = pawn4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        try {
            java.lang.String str5 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            java.lang.String str7 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        try {
            a1.ChessPiece chessPiece8 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        java.lang.Class<?> wildcardClass9 = pawn5.getClass();
        try {
            pawn5.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        try {
            java.lang.String str14 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            rook6.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        try {
            a1.ChessPiece chessPiece20 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = knight13.legalMoves();
        try {
            java.lang.String str15 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        try {
            a1.ChessPiece chessPiece19 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        try {
            java.lang.String str7 = queen6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        try {
            java.lang.String str5 = queen4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        try {
            java.lang.String str5 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.King king7 = new a1.King(chessBoard0, color6);
        try {
            java.lang.String str8 = king7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        try {
            java.lang.String str19 = knight18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        try {
            rook5.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        try {
            java.lang.String str9 = pawn8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        try {
            java.lang.String str8 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        try {
            java.lang.String str5 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        try {
            java.lang.String str31 = rook21.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        java.lang.Class<?> wildcardClass14 = bishop13.getClass();
        try {
            java.lang.String str15 = bishop13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList8 = rook7.legalMoves();
        try {
            java.lang.String str9 = rook7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        java.lang.Class<?> wildcardClass9 = pawn5.getClass();
        try {
            java.lang.String str10 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = pawn6.legalMoves();
        try {
            java.lang.String str8 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.util.ArrayList<java.lang.String> strList8 = queen7.legalMoves();
        try {
            java.lang.String str9 = queen7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = bishop8.getClass();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        java.lang.String str11 = bishop8.getPosition();
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        java.lang.Class<?> wildcardClass14 = bishop13.getClass();
        java.lang.String str15 = bishop13.getPosition();
        try {
            java.lang.String str16 = bishop13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "a1" + "'", str15.equals("a1"));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        king22.setPosition("a1");
        try {
            java.lang.String str25 = king22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        try {
            java.lang.String str32 = queen31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook30.legalMoves();
        boolean boolean35 = chessBoard19.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList36 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = rook30.legalMoves();
        boolean boolean39 = chessBoard9.placePiece((a1.ChessPiece) rook30, "");
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        try {
            java.lang.String str8 = rook5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        try {
            java.lang.String str25 = pawn24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        try {
            java.lang.String str5 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        try {
            java.lang.String str9 = pawn8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        a1.ChessPiece.Color color8 = rook5.getColor();
        try {
            java.lang.String str9 = rook5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        try {
            java.lang.String str28 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            a1.ChessPiece chessPiece8 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        try {
            a1.ChessPiece chessPiece10 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = queen6.legalMoves();
        try {
            java.lang.String str8 = queen6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        try {
            queen31.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        java.lang.String str9 = chessPiece8.getPosition();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1" + "'", str9.equals("a1"));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        try {
            java.lang.String str7 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            rook11.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        try {
            java.lang.String str7 = queen6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        try {
            knight9.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = knight13.getColor();
        java.util.ArrayList<java.lang.String> strList15 = knight13.legalMoves();
        try {
            java.lang.String str16 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook30.legalMoves();
        boolean boolean35 = chessBoard19.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList36 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = rook30.legalMoves();
        boolean boolean39 = chessBoard9.placePiece((a1.ChessPiece) rook30, "");
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str42 = rook30.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        try {
            a1.ChessPiece chessPiece12 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        try {
            java.lang.String str14 = pawn13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = bishop13.legalMoves();
        try {
            java.lang.String str15 = bishop13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        try {
            java.lang.String str12 = queen11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        try {
            java.lang.String str6 = rook5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = queen6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = queen6.legalMoves();
        try {
            java.lang.String str9 = queen6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        try {
            java.lang.String str12 = queen11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        try {
            java.lang.String str23 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        try {
            java.lang.String str7 = bishop6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass7 = knight4.getClass();
        a1.ChessPiece.Color color8 = knight4.getColor();
        try {
            java.lang.String str9 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.Class<?> wildcardClass11 = bishop10.getClass();
        try {
            java.lang.String str12 = bishop10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        try {
            java.lang.String str10 = rook9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = king6.legalMoves();
        try {
            java.lang.String str9 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        try {
            knight2.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        try {
            java.lang.String str6 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece5 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.King king10 = new a1.King(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = king10.legalMoves();
        try {
            java.lang.String str12 = king10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.lang.String str13 = king12.getPosition();
        try {
            java.lang.String str14 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Rook rook31 = new a1.Rook(chessBoard0, color30);
        try {
            java.lang.String str32 = rook31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        try {
            java.lang.String str14 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        try {
            a1.ChessPiece chessPiece17 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        try {
            chessBoard0.move("hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        java.util.ArrayList<java.lang.String> strList21 = knight16.legalMoves();
        try {
            java.lang.String str22 = knight16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = knight13.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = knight13.legalMoves();
        try {
            java.lang.String str16 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        try {
            java.lang.String str6 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        java.util.ArrayList<java.lang.String> strList4 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass5 = strList4.getClass();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        try {
            java.lang.String str7 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        try {
            java.lang.String str11 = pawn10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        java.lang.Class<?> wildcardClass9 = pawn5.getClass();
        java.util.ArrayList<java.lang.String> strList10 = pawn5.legalMoves();
        try {
            java.lang.String str11 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            java.lang.String str15 = bishop14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        king22.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList25 = king22.legalMoves();
        try {
            java.lang.String str26 = king22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        try {
            a1.ChessPiece chessPiece6 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        try {
            a1.ChessPiece chessPiece15 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        try {
            a1.ChessPiece chessPiece8 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = queen10.getColor();
        try {
            java.lang.String str12 = queen10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNull(color11);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        try {
            java.lang.String str17 = queen14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        try {
            java.lang.String str9 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        try {
            chessBoard0.move("", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        try {
            java.lang.String str9 = queen8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        try {
            java.lang.String str19 = bishop18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = pawn8.legalMoves();
        try {
            java.lang.String str10 = pawn8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        java.util.ArrayList<java.lang.String> strList4 = knight2.legalMoves();
        try {
            java.lang.String str5 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = bishop4.legalMoves();
        java.lang.String str6 = bishop4.getPosition();
        java.lang.Class<?> wildcardClass7 = bishop4.getClass();
        a1.ChessPiece.Color color8 = bishop4.getColor();
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        try {
            java.lang.String str33 = pawn32.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        try {
            java.lang.String str13 = queen12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = queen6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = queen6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = queen6.legalMoves();
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        try {
            java.lang.String str3 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        a1.ChessPiece.Color color8 = knight2.getColor();
        try {
            java.lang.String str9 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        try {
            a1.ChessPiece chessPiece9 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        java.util.ArrayList<java.lang.String> strList30 = knight27.legalMoves();
        try {
            java.lang.String str31 = knight27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = bishop2.legalMoves();
        a1.ChessPiece.Color color4 = bishop2.getColor();
        bishop2.setPosition("a1");
        try {
            java.lang.String str7 = bishop2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(color4);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = rook9.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard5, color7);
        java.util.ArrayList<java.lang.String> strList9 = rook8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook8.legalMoves();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) rook8, "");
        try {
            java.lang.String str13 = rook8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = rook9.legalMoves();
        try {
            rook9.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.lang.String str7 = pawn6.getPosition();
        try {
            java.lang.String str8 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook30.legalMoves();
        boolean boolean35 = chessBoard19.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList36 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = rook30.legalMoves();
        boolean boolean39 = chessBoard9.placePiece((a1.ChessPiece) rook30, "");
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList42 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList43 = rook30.legalMoves();
        try {
            java.lang.String str44 = rook30.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        try {
            java.lang.String str11 = bishop10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            a1.ChessPiece chessPiece24 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard0, color25);
        try {
            java.lang.String str27 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        java.lang.String str7 = chessBoard5.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard5, color8);
        java.lang.String str10 = chessBoard5.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard5, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard5, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) bishop16, "");
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        a1.ChessPiece.Color color8 = king6.getColor();
        try {
            java.lang.String str9 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        java.lang.String str6 = knight4.getPosition();
        try {
            java.lang.String str7 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.Class<?> wildcardClass3 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList4 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        try {
            knight2.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessPiece.Color color14 = queen11.getColor();
        try {
            java.lang.String str15 = queen11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(color14);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        try {
            a1.ChessPiece chessPiece14 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        try {
            a1.ChessPiece chessPiece18 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        java.util.ArrayList<java.lang.String> strList23 = king22.legalMoves();
        try {
            java.lang.String str24 = king22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            queen20.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.lang.String str8 = rook6.getPosition();
        try {
            java.lang.String str9 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1" + "'", str8.equals("a1"));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList17 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList18 = rook11.legalMoves();
        try {
            java.lang.String str19 = rook11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        java.lang.Class<?> wildcardClass8 = rook5.getClass();
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        try {
            java.lang.String str12 = king11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece chessPiece16 = null;
        boolean boolean18 = chessBoard0.placePiece(chessPiece16, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            a1.ChessPiece chessPiece20 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = bishop8.getClass();
        try {
            java.lang.String str10 = bishop8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        try {
            knight4.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        try {
            chessBoard0.move("", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = knight13.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = knight13.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = knight13.legalMoves();
        try {
            java.lang.String str17 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = pawn11.getColor();
        try {
            pawn11.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color12);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = bishop2.legalMoves();
        try {
            java.lang.String str4 = bishop2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        try {
            knight15.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        try {
            java.lang.String str14 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        try {
            java.lang.String str14 = pawn11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard8, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece chessPiece22 = chessBoard13.getPiece("a1");
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard13, color23);
        boolean boolean26 = chessBoard8.placePiece((a1.ChessPiece) pawn24, "a1");
        java.util.ArrayList<java.lang.String> strList27 = pawn24.legalMoves();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) pawn24, "");
        try {
            pawn24.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chessPiece22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = king15.legalMoves();
        try {
            java.lang.String str18 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = king15.legalMoves();
        a1.ChessPiece.Color color18 = king15.getColor();
        java.util.ArrayList<java.lang.String> strList19 = king15.legalMoves();
        try {
            java.lang.String str20 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        java.lang.String str38 = pawn35.getPosition();
        try {
            java.lang.String str39 = pawn35.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "a1" + "'", str38.equals("a1"));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        java.lang.String str16 = chessBoard0.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        try {
            java.lang.String str16 = knight15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        try {
            java.lang.String str16 = bishop15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Queen queen2 = new a1.Queen(chessBoard0, color1);
        try {
            java.lang.String str3 = queen2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        try {
            java.lang.String str21 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        chessBoard9.initialize();
        java.lang.String str11 = chessBoard9.toString();
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard9, color12);
        java.lang.String str14 = chessBoard9.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard9, color15);
        java.lang.Class<?> wildcardClass17 = chessBoard9.getClass();
        a1.ChessPiece.Color color18 = null;
        a1.Queen queen19 = new a1.Queen(chessBoard9, color18);
        java.util.ArrayList<java.lang.String> strList20 = queen19.legalMoves();
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen19, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str23 = queen19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str11.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        try {
            java.lang.String str8 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList15 = pawn14.legalMoves();
        try {
            java.lang.String str16 = pawn14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        try {
            pawn14.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        try {
            java.lang.String str24 = bishop20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard26 = new a1.ChessBoard();
        a1.ChessPiece.Color color27 = null;
        a1.Pawn pawn28 = new a1.Pawn(chessBoard26, color27);
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard26, color29);
        a1.ChessPiece.Color color31 = null;
        a1.Queen queen32 = new a1.Queen(chessBoard26, color31);
        a1.ChessPiece.Color color33 = null;
        a1.Bishop bishop34 = new a1.Bishop(chessBoard26, color33);
        a1.ChessBoard chessBoard35 = new a1.ChessBoard();
        chessBoard35.initialize();
        java.lang.String str37 = chessBoard35.toString();
        a1.ChessPiece.Color color38 = null;
        a1.Knight knight39 = new a1.Knight(chessBoard35, color38);
        java.lang.String str40 = chessBoard35.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Queen queen42 = new a1.Queen(chessBoard35, color41);
        java.lang.Class<?> wildcardClass43 = chessBoard35.getClass();
        a1.ChessPiece.Color color44 = null;
        a1.Queen queen45 = new a1.Queen(chessBoard35, color44);
        java.util.ArrayList<java.lang.String> strList46 = queen45.legalMoves();
        boolean boolean48 = chessBoard26.placePiece((a1.ChessPiece) queen45, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        boolean boolean50 = chessBoard0.placePiece((a1.ChessPiece) queen45, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str51 = queen45.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str37.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.lang.String str14 = queen13.getPosition();
        try {
            java.lang.String str15 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a1" + "'", str14.equals("a1"));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        try {
            java.lang.String str14 = queen11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = chessBoard0.getClass();
        try {
            a1.ChessPiece chessPiece11 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard8, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece chessPiece22 = chessBoard13.getPiece("a1");
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard13, color23);
        boolean boolean26 = chessBoard8.placePiece((a1.ChessPiece) pawn24, "a1");
        java.util.ArrayList<java.lang.String> strList27 = pawn24.legalMoves();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) pawn24, "");
        try {
            java.lang.String str30 = pawn24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chessPiece22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook3.legalMoves();
        try {
            java.lang.String str8 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        try {
            rook16.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard0, color24);
        try {
            java.lang.String str26 = king25.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        try {
            a1.ChessPiece chessPiece26 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        try {
            chessBoard0.move("hi!", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = queen31.getColor();
        java.util.ArrayList<java.lang.String> strList33 = queen31.legalMoves();
        try {
            queen31.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(color32);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook3.legalMoves();
        a1.ChessPiece.Color color6 = rook3.getColor();
        try {
            java.lang.String str7 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(color6);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        try {
            pawn15.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        try {
            knight18.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Rook rook2 = new a1.Rook(chessBoard0, color1);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        java.util.ArrayList<java.lang.String> strList14 = pawn11.legalMoves();
        try {
            java.lang.String str15 = pawn11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        try {
            java.lang.String str15 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        chessBoard0.initialize();
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) knight16, "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        try {
            a1.ChessPiece chessPiece34 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        try {
            knight4.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        try {
            chessBoard0.move("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        try {
            java.lang.String str13 = queen12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        try {
            bishop18.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        try {
            java.lang.String str13 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        java.util.ArrayList<java.lang.String> strList30 = king26.legalMoves();
        try {
            java.lang.String str31 = king26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        try {
            java.lang.String str10 = king9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = rook13.legalMoves();
        try {
            java.lang.String str15 = rook13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        try {
            java.lang.String str18 = queen15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        java.util.ArrayList<java.lang.String> strList25 = knight24.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = rook9.legalMoves();
        a1.ChessPiece.Color color11 = rook9.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(color11);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        try {
            java.lang.String str13 = bishop12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        try {
            java.lang.String str12 = pawn11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.lang.Class<?> wildcardClass9 = bishop8.getClass();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        java.lang.Class<?> wildcardClass11 = bishop8.getClass();
        try {
            java.lang.String str12 = bishop8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard5, color7);
        java.util.ArrayList<java.lang.String> strList9 = rook8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook8.legalMoves();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) rook8, "");
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        try {
            java.lang.String str15 = pawn14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        try {
            pawn15.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = rook3.getColor();
        org.junit.Assert.assertNull(color4);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        try {
            java.lang.String str9 = bishop8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = knight13.getColor();
        java.util.ArrayList<java.lang.String> strList15 = knight13.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = knight13.legalMoves();
        try {
            java.lang.String str17 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        java.lang.Class<?> wildcardClass9 = pawn5.getClass();
        try {
            pawn5.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        try {
            java.lang.String str7 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = king15.legalMoves();
        a1.ChessPiece.Color color18 = king15.getColor();
        try {
            java.lang.String str19 = king15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(color18);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            a1.ChessPiece chessPiece24 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        try {
            chessBoard0.move("hi!", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        java.lang.Class<?> wildcardClass32 = queen31.getClass();
        try {
            java.lang.String str33 = queen31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            chessBoard0.move("hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = knight13.getColor();
        try {
            java.lang.String str15 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color14);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        try {
            java.lang.String str17 = rook16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = rook10.legalMoves();
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard13, color21);
        boolean boolean24 = chessBoard0.placePiece((a1.ChessPiece) knight22, "a1");
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = knight13.getColor();
        java.util.ArrayList<java.lang.String> strList15 = knight13.legalMoves();
        java.util.ArrayList<java.lang.String> strList16 = knight13.legalMoves();
        try {
            knight13.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessPiece.Color color28 = bishop27.getColor();
        java.util.ArrayList<java.lang.String> strList29 = bishop27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = bishop27.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNull(color28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            java.lang.String str15 = bishop14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        try {
            chessPiece8.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        try {
            queen13.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        try {
            java.lang.String str17 = queen16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        try {
            java.lang.String str20 = king19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece3 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = pawn8.getColor();
        try {
            java.lang.String str10 = pawn8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNull(color9);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard0, color31);
        java.util.ArrayList<java.lang.String> strList33 = pawn32.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        try {
            java.lang.String str9 = bishop8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        a1.ChessPiece.Color color19 = king18.getColor();
        try {
            java.lang.String str20 = king18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNull(color19);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        java.lang.String str4 = knight2.getPosition();
        try {
            java.lang.String str5 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1" + "'", str4.equals("a1"));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        try {
            java.lang.String str18 = queen17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str53 = queen48.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        try {
            a1.ChessPiece chessPiece27 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        java.util.ArrayList<java.lang.String> strList4 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList5 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook3.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = rook3.legalMoves();
        try {
            java.lang.String str9 = rook3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        try {
            java.lang.String str8 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = king6.legalMoves();
        try {
            java.lang.String str11 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard0, color25);
        try {
            java.lang.String str27 = king26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        java.util.ArrayList<java.lang.String> strList9 = pawn5.legalMoves();
        try {
            java.lang.String str10 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece14 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        try {
            queen16.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        try {
            java.lang.String str7 = queen6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard3, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard3, color15);
        a1.ChessBoard chessBoard17 = null;
        a1.ChessPiece.Color color18 = null;
        a1.Knight knight19 = new a1.Knight(chessBoard17, color18);
        java.lang.String str20 = knight19.getPosition();
        a1.ChessPiece.Color color21 = knight19.getColor();
        boolean boolean23 = chessBoard3.placePiece((a1.ChessPiece) knight19, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.King king25 = new a1.King(chessBoard3, color24);
        king25.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList28 = king25.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) king25, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            a1.ChessPiece chessPiece32 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
        org.junit.Assert.assertNull(color21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        try {
            bishop20.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            java.lang.String str15 = bishop14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Knight knight33 = new a1.Knight(chessBoard0, color32);
        try {
            java.lang.String str34 = knight33.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = rook9.legalMoves();
        try {
            java.lang.String str11 = rook9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        try {
            bishop8.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = queen10.getColor();
        java.util.ArrayList<java.lang.String> strList12 = queen10.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = queen10.legalMoves();
        try {
            java.lang.String str14 = queen10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNull(color11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Knight knight31 = new a1.Knight(chessBoard0, color30);
        try {
            java.lang.String str32 = knight31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        knight2.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList10 = knight2.legalMoves();
        try {
            java.lang.String str11 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        java.lang.String str13 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str13.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        try {
            java.lang.String str16 = pawn15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        chessBoard0.initialize();
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        try {
            java.lang.String str10 = king9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        java.lang.String str9 = pawn5.getPosition();
        java.util.ArrayList<java.lang.String> strList10 = pawn5.legalMoves();
        java.lang.Class<?> wildcardClass11 = pawn5.getClass();
        java.util.ArrayList<java.lang.String> strList12 = pawn5.legalMoves();
        try {
            java.lang.String str13 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1" + "'", str9.equals("a1"));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = rook6.legalMoves();
        java.lang.Class<?> wildcardClass8 = strList7.getClass();
        java.lang.Class<?> wildcardClass9 = strList7.getClass();
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        try {
            king6.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        java.lang.String str3 = chessBoard0.toString();
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard6, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard9, color10);
        boolean boolean13 = chessBoard6.placePiece((a1.ChessPiece) pawn11, "");
        a1.ChessPiece chessPiece15 = chessBoard6.getPiece("a1");
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        chessBoard24.initialize();
        a1.ChessPiece.Color color26 = null;
        a1.Rook rook27 = new a1.Rook(chessBoard24, color26);
        java.util.ArrayList<java.lang.String> strList28 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook27.legalMoves();
        boolean boolean32 = chessBoard16.placePiece((a1.ChessPiece) rook27, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = rook27.legalMoves();
        java.util.ArrayList<java.lang.String> strList34 = rook27.legalMoves();
        boolean boolean36 = chessBoard6.placePiece((a1.ChessPiece) rook27, "");
        java.lang.String str37 = rook27.getPosition();
        java.util.ArrayList<java.lang.String> strList38 = rook27.legalMoves();
        boolean boolean40 = chessBoard0.placePiece((a1.ChessPiece) rook27, "a1");
        try {
            java.lang.String str41 = rook27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str3.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(chessPiece15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "a1" + "'", str37.equals("a1"));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Knight knight29 = new a1.Knight(chessBoard0, color28);
        try {
            java.lang.String str30 = knight29.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        try {
            a1.ChessPiece chessPiece17 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        try {
            a1.ChessPiece chessPiece14 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        a1.ChessPiece.Color color7 = pawn6.getColor();
        org.junit.Assert.assertNull(color7);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        try {
            java.lang.String str11 = queen10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessBoard chessBoard18 = null;
        a1.ChessPiece.Color color19 = null;
        a1.Knight knight20 = new a1.Knight(chessBoard18, color19);
        java.lang.Class<?> wildcardClass21 = knight20.getClass();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) knight20, "");
        java.util.ArrayList<java.lang.String> strList24 = knight20.legalMoves();
        try {
            java.lang.String str25 = knight20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList32 = bishop31.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard0, color8);
        chessBoard0.initialize();
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = queen17.legalMoves();
        try {
            java.lang.String str19 = queen17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        a1.ChessPiece.Color color8 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList9 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass10 = strList9.getClass();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = king16.legalMoves();
        try {
            java.lang.String str18 = king16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        try {
            java.lang.String str12 = pawn11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        try {
            java.lang.String str25 = king24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        java.lang.Class<?> wildcardClass32 = queen31.getClass();
        a1.ChessPiece.Color color33 = queen31.getColor();
        java.util.ArrayList<java.lang.String> strList34 = queen31.legalMoves();
        try {
            java.lang.String str35 = queen31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(color33);
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard0, color23);
        try {
            java.lang.String str25 = rook24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        try {
            chessBoard0.move("hi!", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        try {
            java.lang.String str10 = knight9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Bishop bishop31 = new a1.Bishop(chessBoard0, color30);
        try {
            a1.ChessPiece chessPiece33 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        try {
            java.lang.String str13 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        try {
            pawn5.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        a1.ChessPiece.Color color20 = king19.getColor();
        try {
            java.lang.String str21 = king19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color20);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        a1.ChessBoard chessBoard12 = null;
        a1.ChessPiece.Color color13 = null;
        a1.Knight knight14 = new a1.Knight(chessBoard12, color13);
        java.lang.Class<?> wildcardClass15 = knight14.getClass();
        java.util.ArrayList<java.lang.String> strList16 = knight14.legalMoves();
        boolean boolean18 = chessBoard5.placePiece((a1.ChessPiece) knight14, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard5, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList23 = queen20.legalMoves();
        try {
            java.lang.String str24 = queen20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        try {
            java.lang.String str16 = rook15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        try {
            a1.ChessPiece chessPiece13 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.lang.String str9 = chessBoard0.toString();
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList23 = queen20.legalMoves();
        try {
            java.lang.String str24 = queen20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.lang.Class<?> wildcardClass6 = knight2.getClass();
        try {
            java.lang.String str7 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        java.lang.Class<?> wildcardClass34 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        a1.ChessPiece chessPiece11 = chessBoard0.getPiece("a1");
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNull(chessPiece11);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = king16.legalMoves();
        try {
            king16.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard21, color31);
        boolean boolean34 = chessBoard16.placePiece((a1.ChessPiece) pawn32, "a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "hi!");
        a1.ChessPiece.Color color39 = null;
        a1.Queen queen40 = new a1.Queen(chessBoard0, color39);
        try {
            a1.ChessPiece chessPiece42 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        chessBoard0.initialize();
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.lang.Class<?> wildcardClass7 = pawn6.getClass();
        try {
            java.lang.String str8 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        try {
            java.lang.String str25 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        try {
            java.lang.String str17 = pawn16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        try {
            java.lang.String str7 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        chessBoard0.initialize();
        try {
            chessBoard0.move("a1", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        chessBoard0.initialize();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        try {
            java.lang.String str12 = bishop10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = queen8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = queen8.legalMoves();
        try {
            queen8.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        try {
            java.lang.String str20 = knight18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        try {
            a1.ChessPiece chessPiece4 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        a1.ChessPiece.Color color28 = bishop27.getColor();
        try {
            java.lang.String str29 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNull(color28);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        try {
            java.lang.String str21 = bishop20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        java.lang.Class<?> wildcardClass13 = bishop12.getClass();
        try {
            java.lang.String str14 = bishop12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        a1.ChessPiece.Color color18 = null;
        a1.King king19 = new a1.King(chessBoard0, color18);
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard0, color20);
        java.lang.String str22 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str22.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        java.lang.Class<?> wildcardClass26 = chessBoard0.getClass();
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece29 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        try {
            java.lang.String str10 = rook9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        try {
            chessBoard0.move("hi!", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        king22.setPosition("a1");
        java.util.ArrayList<java.lang.String> strList25 = king22.legalMoves();
        java.lang.Class<?> wildcardClass26 = strList25.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard21, color22);
        a1.ChessBoard chessBoard24 = new a1.ChessBoard();
        a1.ChessPiece.Color color25 = null;
        a1.Pawn pawn26 = new a1.Pawn(chessBoard24, color25);
        boolean boolean28 = chessBoard21.placePiece((a1.ChessPiece) pawn26, "");
        a1.ChessPiece chessPiece30 = chessBoard21.getPiece("a1");
        a1.ChessPiece.Color color31 = null;
        a1.Pawn pawn32 = new a1.Pawn(chessBoard21, color31);
        boolean boolean34 = chessBoard16.placePiece((a1.ChessPiece) pawn32, "a1");
        a1.ChessPiece.Color color35 = null;
        a1.Rook rook36 = new a1.Rook(chessBoard16, color35);
        boolean boolean38 = chessBoard0.placePiece((a1.ChessPiece) rook36, "hi!");
        java.lang.Class<?> wildcardClass39 = rook36.getClass();
        try {
            java.lang.String str40 = rook36.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(chessPiece30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = knight4.getPosition();
        java.util.ArrayList<java.lang.String> strList6 = knight4.legalMoves();
        java.lang.Class<?> wildcardClass7 = knight4.getClass();
        java.util.ArrayList<java.lang.String> strList8 = knight4.legalMoves();
        try {
            java.lang.String str9 = knight4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Bishop bishop5 = new a1.Bishop(chessBoard3, color4);
        a1.ChessBoard chessBoard6 = new a1.ChessBoard();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard6, color7);
        boolean boolean10 = chessBoard3.placePiece((a1.ChessPiece) pawn8, "");
        a1.ChessPiece chessPiece12 = chessBoard3.getPiece("a1");
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard13, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard16, color17);
        boolean boolean20 = chessBoard13.placePiece((a1.ChessPiece) pawn18, "");
        a1.ChessBoard chessBoard21 = new a1.ChessBoard();
        chessBoard21.initialize();
        a1.ChessPiece.Color color23 = null;
        a1.Rook rook24 = new a1.Rook(chessBoard21, color23);
        java.util.ArrayList<java.lang.String> strList25 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList26 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList27 = rook24.legalMoves();
        boolean boolean29 = chessBoard13.placePiece((a1.ChessPiece) rook24, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList30 = rook24.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook24.legalMoves();
        boolean boolean33 = chessBoard3.placePiece((a1.ChessPiece) rook24, "");
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard3, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) pawn35, "");
        java.util.ArrayList<java.lang.String> strList38 = pawn35.legalMoves();
        try {
            java.lang.String str39 = pawn35.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chessPiece12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = king12.legalMoves();
        try {
            java.lang.String str14 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str17 = rook11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        chessBoard14.initialize();
        java.lang.String str16 = chessBoard14.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard14, color17);
        java.lang.String str19 = chessBoard14.toString();
        a1.ChessPiece.Color color20 = null;
        a1.Queen queen21 = new a1.Queen(chessBoard14, color20);
        java.lang.Class<?> wildcardClass22 = chessBoard14.getClass();
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard14, color23);
        a1.ChessPiece.Color color25 = null;
        a1.King king26 = new a1.King(chessBoard14, color25);
        java.lang.String str27 = king26.getPosition();
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) king26, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Knight knight31 = new a1.Knight(chessBoard0, color30);
        java.util.ArrayList<java.lang.String> strList32 = knight31.legalMoves();
        java.lang.String str33 = knight31.getPosition();
        try {
            java.lang.String str34 = knight31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str19.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "a1" + "'", str27.equals("a1"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "a1" + "'", str33.equals("a1"));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        try {
            king15.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.lang.Class<?> wildcardClass7 = pawn6.getClass();
        java.util.ArrayList<java.lang.String> strList8 = pawn6.legalMoves();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        a1.ChessPiece.Color color8 = king6.getColor();
        java.util.ArrayList<java.lang.String> strList9 = king6.legalMoves();
        try {
            java.lang.String str10 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Queen queen17 = new a1.Queen(chessBoard0, color16);
        try {
            java.lang.String str18 = queen17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Knight knight17 = new a1.Knight(chessBoard0, color16);
        java.util.ArrayList<java.lang.String> strList18 = knight17.legalMoves();
        try {
            java.lang.String str19 = knight17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        try {
            java.lang.String str30 = knight27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        try {
            a1.ChessPiece chessPiece7 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.King king2 = new a1.King(chessBoard0, color1);
        try {
            java.lang.String str3 = king2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard0, color15);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        try {
            java.lang.String str26 = queen25.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = king6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = king6.legalMoves();
        try {
            java.lang.String str10 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard16, color17);
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Pawn pawn21 = new a1.Pawn(chessBoard19, color20);
        boolean boolean23 = chessBoard16.placePiece((a1.ChessPiece) pawn21, "");
        a1.ChessPiece chessPiece25 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Queen queen27 = new a1.Queen(chessBoard16, color26);
        a1.ChessPiece.Color color28 = null;
        a1.Rook rook29 = new a1.Rook(chessBoard16, color28);
        java.util.ArrayList<java.lang.String> strList30 = rook29.legalMoves();
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) rook29, "a1");
        try {
            java.lang.String str33 = rook29.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chessPiece25);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        java.lang.String str5 = queen4.getPosition();
        java.lang.String str6 = queen4.getPosition();
        java.util.ArrayList<java.lang.String> strList7 = queen4.legalMoves();
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "a1" + "'", str5.equals("a1"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard0, color6);
        try {
            java.lang.String str8 = pawn7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.lang.String str7 = rook5.getPosition();
        try {
            java.lang.String str8 = rook5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        a1.ChessPiece.Color color36 = null;
        a1.King king37 = new a1.King(chessBoard0, color36);
        try {
            king37.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        chessBoard0.initialize();
        try {
            chessBoard0.move("hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Pawn pawn35 = new a1.Pawn(chessBoard0, color34);
        try {
            java.lang.String str36 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        java.lang.String str7 = chessBoard5.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard5, color8);
        java.lang.String str10 = chessBoard5.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard5, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard5, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) bishop16, "");
        try {
            java.lang.String str19 = bishop16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard3, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard3, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard3, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Rook rook13 = new a1.Rook(chessBoard3, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard3, color14);
        boolean boolean17 = chessBoard0.placePiece((a1.ChessPiece) queen15, "hi!");
        a1.ChessPiece.Color color18 = null;
        a1.Rook rook19 = new a1.Rook(chessBoard0, color18);
        java.lang.String str20 = rook19.getPosition();
        try {
            rook19.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "a1" + "'", str20.equals("a1"));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        java.lang.Class<?> wildcardClass15 = queen13.getClass();
        java.lang.String str16 = queen13.getPosition();
        java.util.ArrayList<java.lang.String> strList17 = queen13.legalMoves();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "a1" + "'", str16.equals("a1"));
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        java.util.ArrayList<java.lang.String> strList4 = knight2.legalMoves();
        a1.ChessPiece.Color color5 = knight2.getColor();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(color5);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        try {
            java.lang.String str13 = king12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = chessBoard0.toString();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        try {
            java.lang.String str12 = bishop11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        try {
            java.lang.String str7 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard7, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) pawn11, "a1");
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        java.lang.Class<?> wildcardClass32 = queen31.getClass();
        a1.ChessPiece.Color color33 = queen31.getColor();
        java.util.ArrayList<java.lang.String> strList34 = queen31.legalMoves();
        try {
            queen31.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(color33);
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        try {
            chessBoard0.move("hi!", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        try {
            java.lang.String str8 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard0, color32);
        try {
            java.lang.String str34 = bishop33.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessBoard chessBoard23 = new a1.ChessBoard();
        chessBoard23.initialize();
        java.lang.String str25 = chessBoard23.toString();
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard23, color26);
        boolean boolean29 = chessBoard0.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color30 = null;
        a1.Queen queen31 = new a1.Queen(chessBoard0, color30);
        a1.ChessPiece.Color color32 = queen31.getColor();
        java.util.ArrayList<java.lang.String> strList33 = queen31.legalMoves();
        try {
            java.lang.String str34 = queen31.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str25.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(color32);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        chessBoard0.initialize();
        try {
            a1.ChessPiece chessPiece8 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        boolean boolean24 = chessBoard17.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessPiece chessPiece26 = chessBoard17.getPiece("a1");
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard17, color27);
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) bishop28, "a1");
        a1.ChessPiece.Color color31 = null;
        a1.King king32 = new a1.King(chessBoard0, color31);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chessPiece26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Pawn pawn27 = new a1.Pawn(chessBoard0, color26);
        try {
            java.lang.String str28 = pawn27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        try {
            knight9.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        java.lang.String str21 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str21.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        try {
            java.lang.String str14 = knight13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard0, color14);
        try {
            pawn15.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Knight knight54 = new a1.Knight(chessBoard0, color53);
        try {
            knight54.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass13 = chessBoard0.getClass();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        java.lang.String str18 = chessBoard16.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard16, color21);
        a1.ChessPiece chessPiece24 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard16, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard29 = new a1.ChessBoard();
        chessBoard29.initialize();
        java.lang.String str31 = chessBoard29.toString();
        a1.ChessPiece.Color color32 = null;
        a1.Bishop bishop33 = new a1.Bishop(chessBoard29, color32);
        java.util.ArrayList<java.lang.String> strList34 = bishop33.legalMoves();
        boolean boolean36 = chessBoard0.placePiece((a1.ChessPiece) bishop33, "hi!");
        a1.ChessPiece.Color color37 = null;
        a1.Knight knight38 = new a1.Knight(chessBoard0, color37);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str31.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Rook rook9 = new a1.Rook(chessBoard0, color8);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        try {
            a1.ChessPiece chessPiece16 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        java.lang.Class<?> wildcardClass26 = chessBoard0.getClass();
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard0, color27);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.util.ArrayList<java.lang.String> strList5 = knight4.legalMoves();
        java.lang.String str6 = knight4.getPosition();
        try {
            knight4.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a1" + "'", str6.equals("a1"));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = king12.getColor();
        try {
            king12.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNull(color13);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        chessBoard0.initialize();
        a1.ChessPiece.Color color22 = null;
        a1.Bishop bishop23 = new a1.Bishop(chessBoard0, color22);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard5, color6);
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        boolean boolean12 = chessBoard5.placePiece((a1.ChessPiece) pawn10, "");
        a1.ChessPiece chessPiece14 = chessBoard5.getPiece("a1");
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) pawn16, "a1");
        a1.ChessPiece.Color color19 = null;
        a1.Rook rook20 = new a1.Rook(chessBoard0, color19);
        java.util.ArrayList<java.lang.String> strList21 = rook20.legalMoves();
        try {
            java.lang.String str22 = rook20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chessPiece14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Rook rook8 = new a1.Rook(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        try {
            java.lang.String str11 = pawn10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        java.lang.String str16 = chessBoard0.toString();
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = bishop18.legalMoves();
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = pawn5.legalMoves();
        try {
            java.lang.String str10 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        chessBoard5.initialize();
        java.lang.String str7 = chessBoard5.toString();
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard5, color8);
        java.lang.String str10 = chessBoard5.toString();
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard5, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard5, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Bishop bishop16 = new a1.Bishop(chessBoard5, color15);
        boolean boolean18 = chessBoard0.placePiece((a1.ChessPiece) bishop16, "");
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str7.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Pawn pawn20 = new a1.Pawn(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Rook rook22 = new a1.Rook(chessBoard0, color21);
        try {
            java.lang.String str23 = rook22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        java.lang.Class<?> wildcardClass5 = chessBoard0.getClass();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        try {
            java.lang.String str8 = bishop7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Queen queen9 = new a1.Queen(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        try {
            chessBoard0.move("hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Knight knight6 = new a1.Knight(chessBoard0, color5);
        try {
            java.lang.String str7 = knight6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        java.lang.String str7 = rook6.getPosition();
        java.util.ArrayList<java.lang.String> strList8 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList9 = rook6.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook6.legalMoves();
        try {
            java.lang.String str11 = rook6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a1" + "'", str7.equals("a1"));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        java.util.ArrayList<java.lang.String> strList28 = bishop27.legalMoves();
        java.util.ArrayList<java.lang.String> strList29 = bishop27.legalMoves();
        a1.ChessPiece.Color color30 = bishop27.getColor();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(color30);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        chessBoard0.initialize();
        chessBoard0.initialize();
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        try {
            a1.ChessPiece chessPiece17 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        try {
            java.lang.String str13 = bishop12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList15 = rook14.legalMoves();
        a1.ChessPiece.Color color16 = rook14.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(color16);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        try {
            chessBoard0.move("", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Rook rook26 = new a1.Rook(chessBoard0, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard0, color27);
        try {
            a1.ChessPiece chessPiece30 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        try {
            java.lang.String str13 = pawn12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        chessBoard11.initialize();
        java.lang.String str13 = chessBoard11.toString();
        a1.ChessPiece.Color color14 = null;
        a1.Knight knight15 = new a1.Knight(chessBoard11, color14);
        chessBoard11.initialize();
        java.lang.Class<?> wildcardClass17 = chessBoard11.getClass();
        a1.ChessPiece.Color color18 = null;
        a1.Pawn pawn19 = new a1.Pawn(chessBoard11, color18);
        a1.ChessPiece.Color color20 = pawn19.getColor();
        java.util.ArrayList<java.lang.String> strList21 = pawn19.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) pawn19, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str24 = pawn19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str13.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(color20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        a1.ChessPiece.Color color4 = knight2.getColor();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList6 = knight2.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = knight2.legalMoves();
        java.lang.String str8 = knight2.getPosition();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertNull(color4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "a1" + "'", str8.equals("a1"));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard9, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Queen queen22 = new a1.Queen(chessBoard9, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard9, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard9, color25);
        a1.ChessPiece.Color color27 = null;
        a1.Queen queen28 = new a1.Queen(chessBoard9, color27);
        a1.ChessPiece.Color color29 = null;
        a1.Bishop bishop30 = new a1.Bishop(chessBoard9, color29);
        boolean boolean32 = chessBoard0.placePiece((a1.ChessPiece) bishop30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList33 = bishop30.legalMoves();
        org.junit.Assert.assertNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        bishop8.setPosition("a1");
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        java.lang.String str13 = king12.getPosition();
        java.util.ArrayList<java.lang.String> strList14 = king12.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = king12.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a1" + "'", str13.equals("a1"));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color14 = null;
        a1.Queen queen15 = new a1.Queen(chessBoard0, color14);
        a1.ChessBoard chessBoard16 = new a1.ChessBoard();
        chessBoard16.initialize();
        java.lang.String str18 = chessBoard16.toString();
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard16, color19);
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard16, color21);
        a1.ChessPiece chessPiece24 = chessBoard16.getPiece("a1");
        a1.ChessPiece.Color color25 = null;
        a1.Queen queen26 = new a1.Queen(chessBoard16, color25);
        boolean boolean28 = chessBoard0.placePiece((a1.ChessPiece) queen26, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            java.lang.String str29 = queen26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessPiece.Color color7 = null;
        a1.Pawn pawn8 = new a1.Pawn(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece chessPiece25 = chessBoard0.getPiece("a1");
        java.lang.Class<?> wildcardClass26 = chessBoard0.getClass();
        chessBoard0.initialize();
        a1.ChessPiece.Color color28 = null;
        a1.Knight knight29 = new a1.Knight(chessBoard0, color28);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chessPiece25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        chessBoard0.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        try {
            java.lang.String str12 = knight11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        try {
            java.lang.String str7 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.util.ArrayList<java.lang.String> strList3 = knight2.legalMoves();
        try {
            java.lang.String str4 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = king6.legalMoves();
        try {
            java.lang.String str8 = king6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Knight knight13 = new a1.Knight(chessBoard0, color12);
        a1.ChessPiece.Color color14 = knight13.getColor();
        java.util.ArrayList<java.lang.String> strList15 = knight13.legalMoves();
        try {
            knight13.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNull(color14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        try {
            chessBoard0.move("a1", "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        java.util.ArrayList<java.lang.String> strList8 = pawn5.legalMoves();
        try {
            java.lang.String str9 = pawn5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        a1.ChessPiece.Color color10 = null;
        a1.Knight knight11 = new a1.Knight(chessBoard0, color10);
        java.lang.String str12 = chessBoard0.toString();
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = queen16.legalMoves();
        java.lang.Class<?> wildcardClass18 = strList17.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str12.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        try {
            java.lang.String str26 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.String str3 = knight2.getPosition();
        java.lang.String str4 = knight2.getPosition();
        java.util.ArrayList<java.lang.String> strList5 = knight2.legalMoves();
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "a1" + "'", str3.equals("a1"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a1" + "'", str4.equals("a1"));
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard10, color11);
        a1.ChessBoard chessBoard13 = new a1.ChessBoard();
        a1.ChessPiece.Color color14 = null;
        a1.Pawn pawn15 = new a1.Pawn(chessBoard13, color14);
        boolean boolean17 = chessBoard10.placePiece((a1.ChessPiece) pawn15, "");
        a1.ChessBoard chessBoard18 = new a1.ChessBoard();
        chessBoard18.initialize();
        a1.ChessPiece.Color color20 = null;
        a1.Rook rook21 = new a1.Rook(chessBoard18, color20);
        java.util.ArrayList<java.lang.String> strList22 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList23 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList24 = rook21.legalMoves();
        boolean boolean26 = chessBoard10.placePiece((a1.ChessPiece) rook21, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList27 = rook21.legalMoves();
        java.util.ArrayList<java.lang.String> strList28 = rook21.legalMoves();
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) rook21, "");
        a1.ChessPiece.Color color31 = null;
        a1.King king32 = new a1.King(chessBoard0, color31);
        try {
            java.lang.String str33 = king32.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.Class<?> wildcardClass3 = knight2.getClass();
        try {
            java.lang.String str4 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Knight knight24 = new a1.Knight(chessBoard0, color23);
        java.lang.String str25 = knight24.getPosition();
        java.util.ArrayList<java.lang.String> strList26 = knight24.legalMoves();
        try {
            java.lang.String str27 = knight24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "a1" + "'", str25.equals("a1"));
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        try {
            java.lang.String str5 = bishop4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        try {
            java.lang.String str28 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Knight knight54 = new a1.Knight(chessBoard0, color53);
        try {
            java.lang.String str55 = knight54.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        java.lang.String str9 = pawn5.getPosition();
        java.util.ArrayList<java.lang.String> strList10 = pawn5.legalMoves();
        java.lang.Class<?> wildcardClass11 = strList10.getClass();
        java.lang.Class<?> wildcardClass12 = strList10.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "a1" + "'", str9.equals("a1"));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Pawn pawn17 = new a1.Pawn(chessBoard0, color16);
        java.lang.String str18 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str18.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = knight18.legalMoves();
        try {
            knight18.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color53 = null;
        a1.Bishop bishop54 = new a1.Bishop(chessBoard0, color53);
        try {
            java.lang.String str55 = chessBoard0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        try {
            java.lang.String str7 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        try {
            java.lang.String str13 = bishop12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = pawn6.legalMoves();
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = queen8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = queen8.legalMoves();
        try {
            java.lang.String str11 = queen8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        chessBoard0.initialize();
        a1.ChessPiece.Color color6 = null;
        a1.King king7 = new a1.King(chessBoard0, color6);
        try {
            king7.setPosition("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessBoard chessBoard17 = new a1.ChessBoard();
        a1.ChessPiece.Color color18 = null;
        a1.Bishop bishop19 = new a1.Bishop(chessBoard17, color18);
        a1.ChessBoard chessBoard20 = new a1.ChessBoard();
        a1.ChessPiece.Color color21 = null;
        a1.Pawn pawn22 = new a1.Pawn(chessBoard20, color21);
        boolean boolean24 = chessBoard17.placePiece((a1.ChessPiece) pawn22, "");
        a1.ChessPiece chessPiece26 = chessBoard17.getPiece("a1");
        a1.ChessPiece.Color color27 = null;
        a1.Bishop bishop28 = new a1.Bishop(chessBoard17, color27);
        boolean boolean30 = chessBoard0.placePiece((a1.ChessPiece) bishop28, "a1");
        a1.ChessPiece.Color color31 = null;
        a1.King king32 = new a1.King(chessBoard0, color31);
        try {
            java.lang.String str33 = king32.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chessPiece26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard0, color17);
        try {
            chessBoard0.move("a1", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.King king18 = new a1.King(chessBoard0, color17);
        try {
            java.lang.String str19 = king18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.Rook rook16 = new a1.Rook(chessBoard0, color15);
        try {
            rook16.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        java.lang.String str9 = chessBoard0.toString();
        java.lang.String str10 = chessBoard0.toString();
        a1.ChessBoard chessBoard11 = new a1.ChessBoard();
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard11, color12);
        a1.ChessBoard chessBoard14 = new a1.ChessBoard();
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard14, color15);
        boolean boolean18 = chessBoard11.placePiece((a1.ChessPiece) pawn16, "");
        a1.ChessPiece chessPiece20 = chessBoard11.getPiece("a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard11, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Queen queen24 = new a1.Queen(chessBoard11, color23);
        a1.ChessBoard chessBoard25 = null;
        a1.ChessPiece.Color color26 = null;
        a1.Knight knight27 = new a1.Knight(chessBoard25, color26);
        java.lang.String str28 = knight27.getPosition();
        a1.ChessPiece.Color color29 = knight27.getColor();
        boolean boolean31 = chessBoard11.placePiece((a1.ChessPiece) knight27, "a1");
        a1.ChessPiece.Color color32 = null;
        a1.King king33 = new a1.King(chessBoard11, color32);
        a1.ChessPiece.Color color34 = null;
        a1.Knight knight35 = new a1.Knight(chessBoard11, color34);
        boolean boolean37 = chessBoard0.placePiece((a1.ChessPiece) knight35, "a1");
        a1.ChessBoard chessBoard38 = new a1.ChessBoard();
        chessBoard38.initialize();
        java.lang.String str40 = chessBoard38.toString();
        a1.ChessPiece.Color color41 = null;
        a1.Bishop bishop42 = new a1.Bishop(chessBoard38, color41);
        a1.ChessPiece.Color color43 = null;
        a1.King king44 = new a1.King(chessBoard38, color43);
        a1.ChessPiece chessPiece46 = chessBoard38.getPiece("a1");
        a1.ChessPiece.Color color47 = null;
        a1.Queen queen48 = new a1.Queen(chessBoard38, color47);
        a1.ChessPiece.Color color49 = queen48.getColor();
        java.util.ArrayList<java.lang.String> strList50 = queen48.legalMoves();
        boolean boolean52 = chessBoard0.placePiece((a1.ChessPiece) queen48, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList53 = queen48.legalMoves();
        try {
            java.lang.String str54 = queen48.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str9.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str10.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(chessPiece20);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
        org.junit.Assert.assertNull(color29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str40.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece46);
        org.junit.Assert.assertNull(color49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList53);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Rook rook4 = new a1.Rook(chessBoard0, color3);
        a1.ChessBoard chessBoard5 = new a1.ChessBoard();
        a1.ChessPiece.Color color6 = null;
        a1.Pawn pawn7 = new a1.Pawn(chessBoard5, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard5, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard5, color10);
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) queen11, "hi!");
        java.util.ArrayList<java.lang.String> strList14 = queen11.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = queen11.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        chessBoard0.initialize();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard0, color9);
        java.util.ArrayList<java.lang.String> strList11 = pawn10.legalMoves();
        try {
            java.lang.String str12 = pawn10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = bishop6.legalMoves();
        try {
            java.lang.String str8 = bishop6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        king22.setPosition("a1");
        java.lang.Class<?> wildcardClass25 = king22.getClass();
        try {
            java.lang.String str26 = king22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.King king15 = new a1.King(chessBoard0, color14);
        java.util.ArrayList<java.lang.String> strList16 = king15.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = king15.legalMoves();
        java.lang.Class<?> wildcardClass18 = strList17.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Pawn pawn18 = new a1.Pawn(chessBoard0, color17);
        try {
            java.lang.String str19 = pawn18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Knight knight7 = new a1.Knight(chessBoard0, color6);
        try {
            a1.ChessPiece chessPiece9 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        try {
            java.lang.String str9 = queen8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Pawn pawn9 = new a1.Pawn(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        java.util.ArrayList<java.lang.String> strList12 = king11.legalMoves();
        try {
            java.lang.String str13 = king11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Queen queen4 = new a1.Queen(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Queen queen8 = new a1.Queen(chessBoard0, color7);
        a1.ChessBoard chessBoard9 = new a1.ChessBoard();
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard9, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        boolean boolean16 = chessBoard9.placePiece((a1.ChessPiece) pawn14, "");
        a1.ChessPiece chessPiece18 = chessBoard9.getPiece("a1");
        a1.ChessBoard chessBoard19 = new a1.ChessBoard();
        a1.ChessPiece.Color color20 = null;
        a1.Bishop bishop21 = new a1.Bishop(chessBoard19, color20);
        a1.ChessBoard chessBoard22 = new a1.ChessBoard();
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard22, color23);
        boolean boolean26 = chessBoard19.placePiece((a1.ChessPiece) pawn24, "");
        a1.ChessBoard chessBoard27 = new a1.ChessBoard();
        chessBoard27.initialize();
        a1.ChessPiece.Color color29 = null;
        a1.Rook rook30 = new a1.Rook(chessBoard27, color29);
        java.util.ArrayList<java.lang.String> strList31 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook30.legalMoves();
        boolean boolean35 = chessBoard19.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.util.ArrayList<java.lang.String> strList36 = rook30.legalMoves();
        java.util.ArrayList<java.lang.String> strList37 = rook30.legalMoves();
        boolean boolean39 = chessBoard9.placePiece((a1.ChessPiece) rook30, "");
        boolean boolean41 = chessBoard0.placePiece((a1.ChessPiece) rook30, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        try {
            chessBoard0.move("hi!", "");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chessPiece18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.King king11 = new a1.King(chessBoard0, color10);
        try {
            java.lang.String str12 = king11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        chessBoard0.initialize();
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        try {
            java.lang.String str19 = knight18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        java.util.ArrayList<java.lang.String> strList11 = knight9.legalMoves();
        boolean boolean13 = chessBoard0.placePiece((a1.ChessPiece) knight9, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.String str14 = chessBoard0.toString();
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = queen13.legalMoves();
        a1.ChessPiece.Color color16 = queen13.getColor();
        try {
            java.lang.String str17 = queen13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(color16);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        java.lang.String str11 = bishop10.getPosition();
        a1.ChessPiece.Color color12 = bishop10.getColor();
        try {
            java.lang.String str13 = bishop10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
        org.junit.Assert.assertNull(color12);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        chessBoard8.initialize();
        a1.ChessPiece.Color color10 = null;
        a1.Rook rook11 = new a1.Rook(chessBoard8, color10);
        java.util.ArrayList<java.lang.String> strList12 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = rook11.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = rook11.legalMoves();
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) rook11, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        a1.ChessPiece.Color color17 = null;
        a1.Knight knight18 = new a1.Knight(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        a1.ChessPiece.Color color21 = null;
        a1.Knight knight22 = new a1.Knight(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.King king24 = new a1.King(chessBoard0, color23);
        try {
            java.lang.String str25 = king24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        java.util.ArrayList<java.lang.String> strList6 = rook5.legalMoves();
        java.util.ArrayList<java.lang.String> strList7 = rook5.legalMoves();
        a1.ChessPiece.Color color8 = rook5.getColor();
        java.util.ArrayList<java.lang.String> strList9 = rook5.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = rook5.legalMoves();
        java.lang.String str11 = rook5.getPosition();
        try {
            java.lang.String str12 = rook5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a1" + "'", str11.equals("a1"));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.Bishop bishop22 = new a1.Bishop(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Pawn pawn24 = new a1.Pawn(chessBoard0, color23);
        a1.ChessBoard chessBoard25 = new a1.ChessBoard();
        chessBoard25.initialize();
        a1.ChessPiece.Color color27 = null;
        a1.Rook rook28 = new a1.Rook(chessBoard25, color27);
        java.util.ArrayList<java.lang.String> strList29 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList30 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList31 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList32 = rook28.legalMoves();
        java.util.ArrayList<java.lang.String> strList33 = rook28.legalMoves();
        boolean boolean35 = chessBoard0.placePiece((a1.ChessPiece) rook28, "");
        a1.ChessPiece.Color color36 = null;
        a1.Knight knight37 = new a1.Knight(chessBoard0, color36);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessBoard chessBoard12 = new a1.ChessBoard();
        a1.ChessPiece.Color color13 = null;
        a1.Pawn pawn14 = new a1.Pawn(chessBoard12, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Queen queen16 = new a1.Queen(chessBoard12, color15);
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard12, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Queen queen20 = new a1.Queen(chessBoard12, color19);
        boolean boolean22 = chessBoard0.placePiece((a1.ChessPiece) queen20, "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
        java.lang.Class<?> wildcardClass23 = chessBoard0.getClass();
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        a1.ChessPiece.Color color26 = null;
        a1.Bishop bishop27 = new a1.Bishop(chessBoard0, color26);
        java.lang.String str28 = bishop27.getPosition();
        try {
            java.lang.String str29 = bishop27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a1" + "'", str28.equals("a1"));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.Class<?> wildcardClass3 = knight2.getClass();
        java.lang.Class<?> wildcardClass4 = knight2.getClass();
        try {
            knight2.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        java.util.ArrayList<java.lang.String> strList21 = knight16.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = knight16.legalMoves();
        java.lang.String str23 = knight16.getPosition();
        try {
            java.lang.String str24 = knight16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "a1" + "'", str23.equals("a1"));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        a1.ChessPiece.Color color2 = null;
        a1.Rook rook3 = new a1.Rook(chessBoard0, color2);
        a1.ChessPiece.Color color4 = null;
        a1.Rook rook5 = new a1.Rook(chessBoard0, color4);
        a1.ChessPiece.Color color6 = null;
        a1.Rook rook7 = new a1.Rook(chessBoard0, color6);
        try {
            java.lang.String str8 = rook7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Bishop bishop10 = new a1.Bishop(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard0, color11);
        try {
            java.lang.String str13 = pawn12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = queen10.getColor();
        java.util.ArrayList<java.lang.String> strList12 = queen10.legalMoves();
        java.util.ArrayList<java.lang.String> strList13 = queen10.legalMoves();
        java.util.ArrayList<java.lang.String> strList14 = queen10.legalMoves();
        java.util.ArrayList<java.lang.String> strList15 = queen10.legalMoves();
        try {
            java.lang.String str16 = queen10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNull(color11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Knight knight6 = new a1.Knight(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Knight knight8 = new a1.Knight(chessBoard0, color7);
        try {
            a1.ChessPiece chessPiece10 = chessBoard0.getPiece("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Bishop bishop12 = new a1.Bishop(chessBoard0, color11);
        java.util.ArrayList<java.lang.String> strList13 = bishop12.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color25);
        try {
            a1.ChessPiece chessPiece28 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Rook rook14 = new a1.Rook(chessBoard0, color13);
        java.lang.Class<?> wildcardClass15 = chessBoard0.getClass();
        java.lang.String str16 = chessBoard0.toString();
        try {
            a1.ChessPiece chessPiece18 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str16.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = knight9.getColor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color10);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Queen queen7 = new a1.Queen(chessBoard0, color6);
        java.lang.Class<?> wildcardClass8 = chessBoard0.getClass();
        a1.ChessPiece.Color color9 = null;
        a1.Queen queen10 = new a1.Queen(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.King king12 = new a1.King(chessBoard0, color11);
        a1.ChessPiece.Color color13 = null;
        a1.King king14 = new a1.King(chessBoard0, color13);
        a1.ChessPiece.Color color15 = null;
        a1.Pawn pawn16 = new a1.Pawn(chessBoard0, color15);
        java.util.ArrayList<java.lang.String> strList17 = pawn16.legalMoves();
        try {
            java.lang.String str18 = pawn16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Pawn pawn11 = new a1.Pawn(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Pawn pawn13 = new a1.Pawn(chessBoard0, color12);
        java.lang.String str14 = chessBoard0.toString();
        a1.ChessPiece.Color color15 = null;
        a1.King king16 = new a1.King(chessBoard0, color15);
        try {
            a1.ChessPiece chessPiece18 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str14.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        java.util.ArrayList<java.lang.String> strList14 = queen13.legalMoves();
        java.lang.Class<?> wildcardClass15 = queen13.getClass();
        java.util.ArrayList<java.lang.String> strList16 = queen13.legalMoves();
        java.util.ArrayList<java.lang.String> strList17 = queen13.legalMoves();
        java.lang.String str18 = queen13.getPosition();
        try {
            queen13.setPosition("hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "a1" + "'", str18.equals("a1"));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessBoard chessBoard8 = null;
        a1.ChessPiece.Color color9 = null;
        a1.Knight knight10 = new a1.Knight(chessBoard8, color9);
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight10, "hi!");
        chessBoard0.initialize();
        a1.ChessPiece.Color color14 = null;
        a1.Rook rook15 = new a1.Rook(chessBoard0, color14);
        try {
            chessBoard0.move("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘", "a1");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Bishop bishop6 = new a1.Bishop(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        java.util.ArrayList<java.lang.String> strList19 = queen18.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        java.util.ArrayList<java.lang.String> strList15 = bishop14.legalMoves();
        try {
            java.lang.String str16 = bishop14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.King king8 = new a1.King(chessBoard0, color7);
        try {
            java.lang.String str9 = king8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessBoard chessBoard8 = new a1.ChessBoard();
        a1.ChessPiece.Color color9 = null;
        a1.Pawn pawn10 = new a1.Pawn(chessBoard8, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard8, color11);
        a1.ChessPiece.Color color13 = null;
        a1.Queen queen14 = new a1.Queen(chessBoard8, color13);
        boolean boolean16 = chessBoard0.placePiece((a1.ChessPiece) queen14, "hi!");
        a1.ChessPiece.Color color17 = null;
        a1.Queen queen18 = new a1.Queen(chessBoard0, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard0, color19);
        try {
            a1.ChessPiece chessPiece22 = chessBoard0.getPiece("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessBoard chessBoard7 = null;
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard7, color8);
        java.lang.Class<?> wildcardClass10 = knight9.getClass();
        boolean boolean12 = chessBoard0.placePiece((a1.ChessPiece) knight9, "a1");
        a1.ChessPiece.Color color13 = null;
        a1.Bishop bishop14 = new a1.Bishop(chessBoard0, color13);
        try {
            java.lang.String str15 = bishop14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Rook rook6 = new a1.Rook(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        a1.ChessPiece.Color color9 = null;
        a1.Rook rook10 = new a1.Rook(chessBoard0, color9);
        a1.ChessPiece.Color color11 = null;
        a1.Queen queen12 = new a1.Queen(chessBoard0, color11);
        try {
            a1.ChessPiece chessPiece14 = chessBoard0.getPiece("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        a1.ChessBoard chessBoard0 = null;
        a1.ChessPiece.Color color1 = null;
        a1.Knight knight2 = new a1.Knight(chessBoard0, color1);
        java.lang.Class<?> wildcardClass3 = knight2.getClass();
        java.util.ArrayList<java.lang.String> strList4 = knight2.legalMoves();
        try {
            java.lang.String str5 = knight2.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        queen6.setPosition("a1");
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        chessBoard0.initialize();
        java.lang.Class<?> wildcardClass6 = chessBoard0.getClass();
        a1.ChessBoard chessBoard7 = new a1.ChessBoard();
        a1.ChessPiece.Color color8 = null;
        a1.Bishop bishop9 = new a1.Bishop(chessBoard7, color8);
        a1.ChessBoard chessBoard10 = new a1.ChessBoard();
        a1.ChessPiece.Color color11 = null;
        a1.Pawn pawn12 = new a1.Pawn(chessBoard10, color11);
        boolean boolean14 = chessBoard7.placePiece((a1.ChessPiece) pawn12, "");
        a1.ChessPiece chessPiece16 = chessBoard7.getPiece("a1");
        a1.ChessPiece.Color color17 = null;
        a1.Bishop bishop18 = new a1.Bishop(chessBoard7, color17);
        a1.ChessPiece.Color color19 = null;
        a1.Bishop bishop20 = new a1.Bishop(chessBoard7, color19);
        java.util.ArrayList<java.lang.String> strList21 = bishop20.legalMoves();
        boolean boolean23 = chessBoard0.placePiece((a1.ChessPiece) bishop20, "a1");
        a1.ChessPiece.Color color24 = null;
        a1.Queen queen25 = new a1.Queen(chessBoard0, color24);
        try {
            java.lang.String str26 = queen25.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chessPiece16);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        a1.ChessPiece chessPiece8 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color9 = null;
        a1.King king10 = new a1.King(chessBoard0, color9);
        java.lang.String str11 = chessBoard0.toString();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(chessPiece8);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str11.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessPiece.Color color14 = null;
        a1.Bishop bishop15 = new a1.Bishop(chessBoard0, color14);
        a1.ChessPiece.Color color16 = null;
        a1.Bishop bishop17 = new a1.Bishop(chessBoard0, color16);
        java.lang.String str18 = bishop17.getPosition();
        try {
            java.lang.String str19 = bishop17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "a1" + "'", str18.equals("a1"));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.King king6 = new a1.King(chessBoard0, color5);
        chessBoard0.initialize();
        a1.ChessPiece.Color color8 = null;
        a1.King king9 = new a1.King(chessBoard0, color8);
        java.util.ArrayList<java.lang.String> strList10 = king9.legalMoves();
        java.util.ArrayList<java.lang.String> strList11 = king9.legalMoves();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Pawn pawn2 = new a1.Pawn(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Bishop bishop4 = new a1.Bishop(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Pawn pawn6 = new a1.Pawn(chessBoard0, color5);
        java.util.ArrayList<java.lang.String> strList7 = pawn6.legalMoves();
        java.util.ArrayList<java.lang.String> strList8 = pawn6.legalMoves();
        try {
            java.lang.String str9 = pawn6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        chessBoard0.initialize();
        java.lang.String str2 = chessBoard0.toString();
        a1.ChessPiece.Color color3 = null;
        a1.Knight knight4 = new a1.Knight(chessBoard0, color3);
        java.lang.String str5 = chessBoard0.toString();
        a1.ChessPiece.Color color6 = null;
        a1.Bishop bishop7 = new a1.Bishop(chessBoard0, color6);
        a1.ChessPiece.Color color8 = null;
        a1.Knight knight9 = new a1.Knight(chessBoard0, color8);
        a1.ChessPiece.Color color10 = null;
        a1.Queen queen11 = new a1.Queen(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Bishop bishop13 = new a1.Bishop(chessBoard0, color12);
        try {
            chessBoard0.move("", "hi!");
            org.junit.Assert.fail("Expected exception of type a1.IllegalMoveException; message: null");
        } catch (a1.IllegalMoveException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str2.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘" + "'", str5.equals("┌─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┬─　─┐\n│ ♜ │ ♞ │ ♝ │ ♛ │ ♚ │ ♝ │ ♞ │ ♜ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │ ♟ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │ 　 │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │\n├─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┼─　─┤\n│ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ │\n└─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┴─　─┘"));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        java.util.ArrayList<java.lang.String> strList21 = knight16.legalMoves();
        java.util.ArrayList<java.lang.String> strList22 = knight16.legalMoves();
        java.lang.Class<?> wildcardClass23 = knight16.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessPiece.Color color3 = null;
        a1.Pawn pawn4 = new a1.Pawn(chessBoard0, color3);
        a1.ChessPiece.Color color5 = null;
        a1.Queen queen6 = new a1.Queen(chessBoard0, color5);
        a1.ChessPiece.Color color7 = null;
        a1.Bishop bishop8 = new a1.Bishop(chessBoard0, color7);
        java.util.ArrayList<java.lang.String> strList9 = bishop8.legalMoves();
        java.util.ArrayList<java.lang.String> strList10 = bishop8.legalMoves();
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece chessPiece9 = chessBoard0.getPiece("a1");
        a1.ChessPiece.Color color10 = null;
        a1.Bishop bishop11 = new a1.Bishop(chessBoard0, color10);
        a1.ChessPiece.Color color12 = null;
        a1.Queen queen13 = new a1.Queen(chessBoard0, color12);
        a1.ChessBoard chessBoard14 = null;
        a1.ChessPiece.Color color15 = null;
        a1.Knight knight16 = new a1.Knight(chessBoard14, color15);
        java.lang.String str17 = knight16.getPosition();
        a1.ChessPiece.Color color18 = knight16.getColor();
        boolean boolean20 = chessBoard0.placePiece((a1.ChessPiece) knight16, "a1");
        a1.ChessPiece.Color color21 = null;
        a1.King king22 = new a1.King(chessBoard0, color21);
        a1.ChessPiece.Color color23 = null;
        a1.Bishop bishop24 = new a1.Bishop(chessBoard0, color23);
        a1.ChessPiece.Color color25 = null;
        a1.Bishop bishop26 = new a1.Bishop(chessBoard0, color25);
        java.util.ArrayList<java.lang.String> strList27 = bishop26.legalMoves();
        try {
            java.lang.String str28 = bishop26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chessPiece9);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a1" + "'", str17.equals("a1"));
        org.junit.Assert.assertNull(color18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        a1.ChessBoard chessBoard0 = new a1.ChessBoard();
        a1.ChessPiece.Color color1 = null;
        a1.Bishop bishop2 = new a1.Bishop(chessBoard0, color1);
        a1.ChessBoard chessBoard3 = new a1.ChessBoard();
        a1.ChessPiece.Color color4 = null;
        a1.Pawn pawn5 = new a1.Pawn(chessBoard3, color4);
        boolean boolean7 = chessBoard0.placePiece((a1.ChessPiece) pawn5, "");
        a1.ChessPiece.Color color8 = pawn5.getColor();
        java.util.ArrayList<java.lang.String> strList9 = pawn5.legalMoves();
        try {
            pawn5.setPosition("");
            org.junit.Assert.fail("Expected exception of type a1.IllegalPositionException; message: null");
        } catch (a1.IllegalPositionException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(color8);
        org.junit.Assert.assertNotNull(strList9);
    }
}

